# Yet another raylib wrapper for Ruby
#
# * https://github.com/vaiorabbit/raylib-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module Raylib
  extend FFI::Library
  # Define/Macro

  RAYLIB_VERSION = "4.5-dev"
  DEG2RAD = Math::PI / 180.0
  RAD2DEG = 180.0 / Math::PI

  # Enum

  FLAG_VSYNC_HINT = 64
  FLAG_FULLSCREEN_MODE = 2
  FLAG_WINDOW_RESIZABLE = 4
  FLAG_WINDOW_UNDECORATED = 8
  FLAG_WINDOW_HIDDEN = 128
  FLAG_WINDOW_MINIMIZED = 512
  FLAG_WINDOW_MAXIMIZED = 1024
  FLAG_WINDOW_UNFOCUSED = 2048
  FLAG_WINDOW_TOPMOST = 4096
  FLAG_WINDOW_ALWAYS_RUN = 256
  FLAG_WINDOW_TRANSPARENT = 16
  FLAG_WINDOW_HIGHDPI = 8192
  FLAG_WINDOW_MOUSE_PASSTHROUGH = 16384
  FLAG_MSAA_4X_HINT = 32
  FLAG_INTERLACED_HINT = 65536
  LOG_ALL = 0
  LOG_TRACE = 1
  LOG_DEBUG = 2
  LOG_INFO = 3
  LOG_WARNING = 4
  LOG_ERROR = 5
  LOG_FATAL = 6
  LOG_NONE = 7
  KEY_NULL = 0
  KEY_APOSTROPHE = 39
  KEY_COMMA = 44
  KEY_MINUS = 45
  KEY_PERIOD = 46
  KEY_SLASH = 47
  KEY_ZERO = 48
  KEY_ONE = 49
  KEY_TWO = 50
  KEY_THREE = 51
  KEY_FOUR = 52
  KEY_FIVE = 53
  KEY_SIX = 54
  KEY_SEVEN = 55
  KEY_EIGHT = 56
  KEY_NINE = 57
  KEY_SEMICOLON = 59
  KEY_EQUAL = 61
  KEY_A = 65
  KEY_B = 66
  KEY_C = 67
  KEY_D = 68
  KEY_E = 69
  KEY_F = 70
  KEY_G = 71
  KEY_H = 72
  KEY_I = 73
  KEY_J = 74
  KEY_K = 75
  KEY_L = 76
  KEY_M = 77
  KEY_N = 78
  KEY_O = 79
  KEY_P = 80
  KEY_Q = 81
  KEY_R = 82
  KEY_S = 83
  KEY_T = 84
  KEY_U = 85
  KEY_V = 86
  KEY_W = 87
  KEY_X = 88
  KEY_Y = 89
  KEY_Z = 90
  KEY_LEFT_BRACKET = 91
  KEY_BACKSLASH = 92
  KEY_RIGHT_BRACKET = 93
  KEY_GRAVE = 96
  KEY_SPACE = 32
  KEY_ESCAPE = 256
  KEY_ENTER = 257
  KEY_TAB = 258
  KEY_BACKSPACE = 259
  KEY_INSERT = 260
  KEY_DELETE = 261
  KEY_RIGHT = 262
  KEY_LEFT = 263
  KEY_DOWN = 264
  KEY_UP = 265
  KEY_PAGE_UP = 266
  KEY_PAGE_DOWN = 267
  KEY_HOME = 268
  KEY_END = 269
  KEY_CAPS_LOCK = 280
  KEY_SCROLL_LOCK = 281
  KEY_NUM_LOCK = 282
  KEY_PRINT_SCREEN = 283
  KEY_PAUSE = 284
  KEY_F1 = 290
  KEY_F2 = 291
  KEY_F3 = 292
  KEY_F4 = 293
  KEY_F5 = 294
  KEY_F6 = 295
  KEY_F7 = 296
  KEY_F8 = 297
  KEY_F9 = 298
  KEY_F10 = 299
  KEY_F11 = 300
  KEY_F12 = 301
  KEY_LEFT_SHIFT = 340
  KEY_LEFT_CONTROL = 341
  KEY_LEFT_ALT = 342
  KEY_LEFT_SUPER = 343
  KEY_RIGHT_SHIFT = 344
  KEY_RIGHT_CONTROL = 345
  KEY_RIGHT_ALT = 346
  KEY_RIGHT_SUPER = 347
  KEY_KB_MENU = 348
  KEY_KP_0 = 320
  KEY_KP_1 = 321
  KEY_KP_2 = 322
  KEY_KP_3 = 323
  KEY_KP_4 = 324
  KEY_KP_5 = 325
  KEY_KP_6 = 326
  KEY_KP_7 = 327
  KEY_KP_8 = 328
  KEY_KP_9 = 329
  KEY_KP_DECIMAL = 330
  KEY_KP_DIVIDE = 331
  KEY_KP_MULTIPLY = 332
  KEY_KP_SUBTRACT = 333
  KEY_KP_ADD = 334
  KEY_KP_ENTER = 335
  KEY_KP_EQUAL = 336
  KEY_BACK = 4
  KEY_MENU = 82
  KEY_VOLUME_UP = 24
  KEY_VOLUME_DOWN = 25
  MOUSE_BUTTON_LEFT = 0
  MOUSE_BUTTON_RIGHT = 1
  MOUSE_BUTTON_MIDDLE = 2
  MOUSE_BUTTON_SIDE = 3
  MOUSE_BUTTON_EXTRA = 4
  MOUSE_BUTTON_FORWARD = 5
  MOUSE_BUTTON_BACK = 6
  MOUSE_CURSOR_DEFAULT = 0
  MOUSE_CURSOR_ARROW = 1
  MOUSE_CURSOR_IBEAM = 2
  MOUSE_CURSOR_CROSSHAIR = 3
  MOUSE_CURSOR_POINTING_HAND = 4
  MOUSE_CURSOR_RESIZE_EW = 5
  MOUSE_CURSOR_RESIZE_NS = 6
  MOUSE_CURSOR_RESIZE_NWSE = 7
  MOUSE_CURSOR_RESIZE_NESW = 8
  MOUSE_CURSOR_RESIZE_ALL = 9
  MOUSE_CURSOR_NOT_ALLOWED = 10
  GAMEPAD_BUTTON_UNKNOWN = 0
  GAMEPAD_BUTTON_LEFT_FACE_UP = 1
  GAMEPAD_BUTTON_LEFT_FACE_RIGHT = 2
  GAMEPAD_BUTTON_LEFT_FACE_DOWN = 3
  GAMEPAD_BUTTON_LEFT_FACE_LEFT = 4
  GAMEPAD_BUTTON_RIGHT_FACE_UP = 5
  GAMEPAD_BUTTON_RIGHT_FACE_RIGHT = 6
  GAMEPAD_BUTTON_RIGHT_FACE_DOWN = 7
  GAMEPAD_BUTTON_RIGHT_FACE_LEFT = 8
  GAMEPAD_BUTTON_LEFT_TRIGGER_1 = 9
  GAMEPAD_BUTTON_LEFT_TRIGGER_2 = 10
  GAMEPAD_BUTTON_RIGHT_TRIGGER_1 = 11
  GAMEPAD_BUTTON_RIGHT_TRIGGER_2 = 12
  GAMEPAD_BUTTON_MIDDLE_LEFT = 13
  GAMEPAD_BUTTON_MIDDLE = 14
  GAMEPAD_BUTTON_MIDDLE_RIGHT = 15
  GAMEPAD_BUTTON_LEFT_THUMB = 16
  GAMEPAD_BUTTON_RIGHT_THUMB = 17
  GAMEPAD_AXIS_LEFT_X = 0
  GAMEPAD_AXIS_LEFT_Y = 1
  GAMEPAD_AXIS_RIGHT_X = 2
  GAMEPAD_AXIS_RIGHT_Y = 3
  GAMEPAD_AXIS_LEFT_TRIGGER = 4
  GAMEPAD_AXIS_RIGHT_TRIGGER = 5
  MATERIAL_MAP_ALBEDO = 0
  MATERIAL_MAP_METALNESS = 1
  MATERIAL_MAP_NORMAL = 2
  MATERIAL_MAP_ROUGHNESS = 3
  MATERIAL_MAP_OCCLUSION = 4
  MATERIAL_MAP_EMISSION = 5
  MATERIAL_MAP_HEIGHT = 6
  MATERIAL_MAP_CUBEMAP = 7
  MATERIAL_MAP_IRRADIANCE = 8
  MATERIAL_MAP_PREFILTER = 9
  MATERIAL_MAP_BRDF = 10
  SHADER_LOC_VERTEX_POSITION = 0
  SHADER_LOC_VERTEX_TEXCOORD01 = 1
  SHADER_LOC_VERTEX_TEXCOORD02 = 2
  SHADER_LOC_VERTEX_NORMAL = 3
  SHADER_LOC_VERTEX_TANGENT = 4
  SHADER_LOC_VERTEX_COLOR = 5
  SHADER_LOC_MATRIX_MVP = 6
  SHADER_LOC_MATRIX_VIEW = 7
  SHADER_LOC_MATRIX_PROJECTION = 8
  SHADER_LOC_MATRIX_MODEL = 9
  SHADER_LOC_MATRIX_NORMAL = 10
  SHADER_LOC_VECTOR_VIEW = 11
  SHADER_LOC_COLOR_DIFFUSE = 12
  SHADER_LOC_COLOR_SPECULAR = 13
  SHADER_LOC_COLOR_AMBIENT = 14
  SHADER_LOC_MAP_ALBEDO = 15
  SHADER_LOC_MAP_METALNESS = 16
  SHADER_LOC_MAP_NORMAL = 17
  SHADER_LOC_MAP_ROUGHNESS = 18
  SHADER_LOC_MAP_OCCLUSION = 19
  SHADER_LOC_MAP_EMISSION = 20
  SHADER_LOC_MAP_HEIGHT = 21
  SHADER_LOC_MAP_CUBEMAP = 22
  SHADER_LOC_MAP_IRRADIANCE = 23
  SHADER_LOC_MAP_PREFILTER = 24
  SHADER_LOC_MAP_BRDF = 25
  SHADER_UNIFORM_FLOAT = 0
  SHADER_UNIFORM_VEC2 = 1
  SHADER_UNIFORM_VEC3 = 2
  SHADER_UNIFORM_VEC4 = 3
  SHADER_UNIFORM_INT = 4
  SHADER_UNIFORM_IVEC2 = 5
  SHADER_UNIFORM_IVEC3 = 6
  SHADER_UNIFORM_IVEC4 = 7
  SHADER_UNIFORM_SAMPLER2D = 8
  SHADER_ATTRIB_FLOAT = 0
  SHADER_ATTRIB_VEC2 = 1
  SHADER_ATTRIB_VEC3 = 2
  SHADER_ATTRIB_VEC4 = 3
  PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1
  PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA = 2
  PIXELFORMAT_UNCOMPRESSED_R5G6B5 = 3
  PIXELFORMAT_UNCOMPRESSED_R8G8B8 = 4
  PIXELFORMAT_UNCOMPRESSED_R5G5B5A1 = 5
  PIXELFORMAT_UNCOMPRESSED_R4G4B4A4 = 6
  PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 = 7
  PIXELFORMAT_UNCOMPRESSED_R32 = 8
  PIXELFORMAT_UNCOMPRESSED_R32G32B32 = 9
  PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 = 10
  PIXELFORMAT_COMPRESSED_DXT1_RGB = 11
  PIXELFORMAT_COMPRESSED_DXT1_RGBA = 12
  PIXELFORMAT_COMPRESSED_DXT3_RGBA = 13
  PIXELFORMAT_COMPRESSED_DXT5_RGBA = 14
  PIXELFORMAT_COMPRESSED_ETC1_RGB = 15
  PIXELFORMAT_COMPRESSED_ETC2_RGB = 16
  PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA = 17
  PIXELFORMAT_COMPRESSED_PVRT_RGB = 18
  PIXELFORMAT_COMPRESSED_PVRT_RGBA = 19
  PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA = 20
  PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA = 21
  TEXTURE_FILTER_POINT = 0
  TEXTURE_FILTER_BILINEAR = 1
  TEXTURE_FILTER_TRILINEAR = 2
  TEXTURE_FILTER_ANISOTROPIC_4X = 3
  TEXTURE_FILTER_ANISOTROPIC_8X = 4
  TEXTURE_FILTER_ANISOTROPIC_16X = 5
  TEXTURE_WRAP_REPEAT = 0
  TEXTURE_WRAP_CLAMP = 1
  TEXTURE_WRAP_MIRROR_REPEAT = 2
  TEXTURE_WRAP_MIRROR_CLAMP = 3
  CUBEMAP_LAYOUT_AUTO_DETECT = 0
  CUBEMAP_LAYOUT_LINE_VERTICAL = 1
  CUBEMAP_LAYOUT_LINE_HORIZONTAL = 2
  CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR = 3
  CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE = 4
  CUBEMAP_LAYOUT_PANORAMA = 5
  FONT_DEFAULT = 0
  FONT_BITMAP = 1
  FONT_SDF = 2
  BLEND_ALPHA = 0
  BLEND_ADDITIVE = 1
  BLEND_MULTIPLIED = 2
  BLEND_ADD_COLORS = 3
  BLEND_SUBTRACT_COLORS = 4
  BLEND_ALPHA_PREMULTIPLY = 5
  BLEND_CUSTOM = 6
  BLEND_CUSTOM_SEPARATE = 7
  GESTURE_NONE = 0
  GESTURE_TAP = 1
  GESTURE_DOUBLETAP = 2
  GESTURE_HOLD = 4
  GESTURE_DRAG = 8
  GESTURE_SWIPE_RIGHT = 16
  GESTURE_SWIPE_LEFT = 32
  GESTURE_SWIPE_UP = 64
  GESTURE_SWIPE_DOWN = 128
  GESTURE_PINCH_IN = 256
  GESTURE_PINCH_OUT = 512
  CAMERA_CUSTOM = 0
  CAMERA_FREE = 1
  CAMERA_ORBITAL = 2
  CAMERA_FIRST_PERSON = 3
  CAMERA_THIRD_PERSON = 4
  CAMERA_PERSPECTIVE = 0
  CAMERA_ORTHOGRAPHIC = 1
  NPATCH_NINE_PATCH = 0
  NPATCH_THREE_PATCH_VERTICAL = 1
  NPATCH_THREE_PATCH_HORIZONTAL = 2

  # Typedef

  typedef :int, :ConfigFlags
  typedef :int, :TraceLogLevel
  typedef :int, :KeyboardKey
  typedef :int, :MouseButton
  typedef :int, :MouseCursor
  typedef :int, :GamepadButton
  typedef :int, :GamepadAxis
  typedef :int, :MaterialMapIndex
  typedef :int, :ShaderLocationIndex
  typedef :int, :ShaderUniformDataType
  typedef :int, :ShaderAttributeDataType
  typedef :int, :PixelFormat
  typedef :int, :TextureFilter
  typedef :int, :TextureWrap
  typedef :int, :CubemapLayout
  typedef :int, :FontType
  typedef :int, :BlendMode
  typedef :int, :Gesture
  typedef :int, :CameraMode
  typedef :int, :CameraProjection
  typedef :int, :NPatchLayout
  callback :TraceLogCallback, [:int, :pointer, :int], :void
  callback :LoadFileDataCallback, [:pointer, :pointer], :pointer
  callback :SaveFileDataCallback, [:pointer, :pointer, :uint], :bool
  callback :LoadFileTextCallback, [:pointer], :pointer
  callback :SaveFileTextCallback, [:pointer, :pointer], :bool
  callback :AudioCallback, [:pointer, :uint], :void

  # Struct

  class Vector2 < FFI::Struct
    layout(
      :x, :float,
      :y, :float,
    )
  end

  class Vector3 < FFI::Struct
    layout(
      :x, :float,
      :y, :float,
      :z, :float,
    )
  end

  class Vector4 < FFI::Struct
    layout(
      :x, :float,
      :y, :float,
      :z, :float,
      :w, :float,
    )
  end

  Quaternion = Vector4

  class Matrix < FFI::Struct
    layout(
      :m0, :float,
      :m4, :float,
      :m8, :float,
      :m12, :float,
      :m1, :float,
      :m5, :float,
      :m9, :float,
      :m13, :float,
      :m2, :float,
      :m6, :float,
      :m10, :float,
      :m14, :float,
      :m3, :float,
      :m7, :float,
      :m11, :float,
      :m15, :float,
    )
  end

  class Color < FFI::Struct
    layout(
      :r, :uchar,
      :g, :uchar,
      :b, :uchar,
      :a, :uchar,
    )
  end

  class Rectangle < FFI::Struct
    layout(
      :x, :float,
      :y, :float,
      :width, :float,
      :height, :float,
    )
  end

  class Image < FFI::Struct
    layout(
      :data, :pointer,
      :width, :int,
      :height, :int,
      :mipmaps, :int,
      :format, :int,
    )
  end

  class Texture < FFI::Struct
    layout(
      :id, :uint,
      :width, :int,
      :height, :int,
      :mipmaps, :int,
      :format, :int,
    )
  end

  Texture2D = Texture
  TextureCubemap = Texture

  class RenderTexture < FFI::Struct
    layout(
      :id, :uint,
      :texture, Texture,
      :depth, Texture,
    )
  end

  RenderTexture2D = RenderTexture

  class NPatchInfo < FFI::Struct
    layout(
      :source, Rectangle,
      :left, :int,
      :top, :int,
      :right, :int,
      :bottom, :int,
      :layout, :int,
    )
  end

  class GlyphInfo < FFI::Struct
    layout(
      :value, :int,
      :offsetX, :int,
      :offsetY, :int,
      :advanceX, :int,
      :image, Image,
    )
  end

  class Font < FFI::Struct
    layout(
      :baseSize, :int,
      :glyphCount, :int,
      :glyphPadding, :int,
      :texture, Texture2D,
      :recs, :pointer,
      :glyphs, :pointer,
    )
  end

  class Camera3D < FFI::Struct
    layout(
      :position, Vector3,
      :target, Vector3,
      :up, Vector3,
      :fovy, :float,
      :projection, :int,
    )
  end

  Camera = Camera3D

  class Camera2D < FFI::Struct
    layout(
      :offset, Vector2,
      :target, Vector2,
      :rotation, :float,
      :zoom, :float,
    )
  end

  class Mesh < FFI::Struct
    layout(
      :vertexCount, :int,
      :triangleCount, :int,
      :vertices, :pointer,
      :texcoords, :pointer,
      :texcoords2, :pointer,
      :normals, :pointer,
      :tangents, :pointer,
      :colors, :pointer,
      :indices, :pointer,
      :animVertices, :pointer,
      :animNormals, :pointer,
      :boneIds, :pointer,
      :boneWeights, :pointer,
      :vaoId, :uint,
      :vboId, :pointer,
    )
  end

  class Shader < FFI::Struct
    layout(
      :id, :uint,
      :locs, :pointer,
    )
  end

  class MaterialMap < FFI::Struct
    layout(
      :texture, Texture2D,
      :color, Color,
      :value, :float,
    )
  end

  class Material < FFI::Struct
    layout(
      :shader, Shader,
      :maps, :pointer,
      :params, [:float, 4],
    )
  end

  class Transform < FFI::Struct
    layout(
      :translation, Vector3,
      :rotation, Quaternion,
      :scale, Vector3,
    )
  end

  class BoneInfo < FFI::Struct
    layout(
      :name, [:char, 32],
      :parent, :int,
    )
  end

  class Model < FFI::Struct
    layout(
      :transform, Matrix,
      :meshCount, :int,
      :materialCount, :int,
      :meshes, :pointer,
      :materials, :pointer,
      :meshMaterial, :pointer,
      :boneCount, :int,
      :bones, :pointer,
      :bindPose, :pointer,
    )
  end

  class ModelAnimation < FFI::Struct
    layout(
      :boneCount, :int,
      :frameCount, :int,
      :bones, :pointer,
      :framePoses, :pointer,
    )
  end

  class Ray < FFI::Struct
    layout(
      :position, Vector3,
      :direction, Vector3,
    )
  end

  class RayCollision < FFI::Struct
    layout(
      :hit, :bool,
      :distance, :float,
      :point, Vector3,
      :normal, Vector3,
    )
  end

  class BoundingBox < FFI::Struct
    layout(
      :min, Vector3,
      :max, Vector3,
    )
  end

  class Wave < FFI::Struct
    layout(
      :frameCount, :uint,
      :sampleRate, :uint,
      :sampleSize, :uint,
      :channels, :uint,
      :data, :pointer,
    )
  end

  class AudioStream < FFI::Struct
    layout(
      :buffer, :pointer,
      :processor, :pointer,
      :sampleRate, :uint,
      :sampleSize, :uint,
      :channels, :uint,
    )
  end

  class Sound < FFI::Struct
    layout(
      :stream, AudioStream,
      :frameCount, :uint,
    )
  end

  class Music < FFI::Struct
    layout(
      :stream, AudioStream,
      :frameCount, :uint,
      :looping, :bool,
      :ctxType, :int,
      :ctxData, :pointer,
    )
  end

  class VrDeviceInfo < FFI::Struct
    layout(
      :hResolution, :int,
      :vResolution, :int,
      :hScreenSize, :float,
      :vScreenSize, :float,
      :vScreenCenter, :float,
      :eyeToScreenDistance, :float,
      :lensSeparationDistance, :float,
      :interpupillaryDistance, :float,
      :lensDistortionValues, [:float, 4],
      :chromaAbCorrection, [:float, 4],
    )
  end

  class VrStereoConfig < FFI::Struct
    layout(
      :projection, [Matrix, 2],
      :viewOffset, [Matrix, 2],
      :leftLensCenter, [:float, 2],
      :rightLensCenter, [:float, 2],
      :leftScreenCenter, [:float, 2],
      :rightScreenCenter, [:float, 2],
      :scale, [:float, 2],
      :scaleIn, [:float, 2],
    )
  end

  class FilePathList < FFI::Struct
    layout(
      :capacity, :uint,
      :count, :uint,
      :paths, :pointer,
    )
  end


  # Function

  def self.setup_raylib_symbols(output_error = false)
    entries = [
      [:InitWindow, :InitWindow, [:int, :int, :pointer], :void],
      [:WindowShouldClose, :WindowShouldClose, [], :bool],
      [:CloseWindow, :CloseWindow, [], :void],
      [:IsWindowReady, :IsWindowReady, [], :bool],
      [:IsWindowFullscreen, :IsWindowFullscreen, [], :bool],
      [:IsWindowHidden, :IsWindowHidden, [], :bool],
      [:IsWindowMinimized, :IsWindowMinimized, [], :bool],
      [:IsWindowMaximized, :IsWindowMaximized, [], :bool],
      [:IsWindowFocused, :IsWindowFocused, [], :bool],
      [:IsWindowResized, :IsWindowResized, [], :bool],
      [:IsWindowState, :IsWindowState, [:uint], :bool],
      [:SetWindowState, :SetWindowState, [:uint], :void],
      [:ClearWindowState, :ClearWindowState, [:uint], :void],
      [:ToggleFullscreen, :ToggleFullscreen, [], :void],
      [:MaximizeWindow, :MaximizeWindow, [], :void],
      [:MinimizeWindow, :MinimizeWindow, [], :void],
      [:RestoreWindow, :RestoreWindow, [], :void],
      [:SetWindowIcon, :SetWindowIcon, [Image.by_value], :void],
      [:SetWindowTitle, :SetWindowTitle, [:pointer], :void],
      [:SetWindowPosition, :SetWindowPosition, [:int, :int], :void],
      [:SetWindowMonitor, :SetWindowMonitor, [:int], :void],
      [:SetWindowMinSize, :SetWindowMinSize, [:int, :int], :void],
      [:SetWindowSize, :SetWindowSize, [:int, :int], :void],
      [:SetWindowOpacity, :SetWindowOpacity, [:float], :void],
      [:GetWindowHandle, :GetWindowHandle, [], :pointer],
      [:GetScreenWidth, :GetScreenWidth, [], :int],
      [:GetScreenHeight, :GetScreenHeight, [], :int],
      [:GetRenderWidth, :GetRenderWidth, [], :int],
      [:GetRenderHeight, :GetRenderHeight, [], :int],
      [:GetMonitorCount, :GetMonitorCount, [], :int],
      [:GetCurrentMonitor, :GetCurrentMonitor, [], :int],
      [:GetMonitorPosition, :GetMonitorPosition, [:int], Vector2.by_value],
      [:GetMonitorWidth, :GetMonitorWidth, [:int], :int],
      [:GetMonitorHeight, :GetMonitorHeight, [:int], :int],
      [:GetMonitorPhysicalWidth, :GetMonitorPhysicalWidth, [:int], :int],
      [:GetMonitorPhysicalHeight, :GetMonitorPhysicalHeight, [:int], :int],
      [:GetMonitorRefreshRate, :GetMonitorRefreshRate, [:int], :int],
      [:GetWindowPosition, :GetWindowPosition, [], Vector2.by_value],
      [:GetWindowScaleDPI, :GetWindowScaleDPI, [], Vector2.by_value],
      [:GetMonitorName, :GetMonitorName, [:int], :pointer],
      [:SetClipboardText, :SetClipboardText, [:pointer], :void],
      [:GetClipboardText, :GetClipboardText, [], :pointer],
      [:EnableEventWaiting, :EnableEventWaiting, [], :void],
      [:DisableEventWaiting, :DisableEventWaiting, [], :void],
      [:SwapScreenBuffer, :SwapScreenBuffer, [], :void],
      [:PollInputEvents, :PollInputEvents, [], :void],
      [:WaitTime, :WaitTime, [:double], :void],
      [:ShowCursor, :ShowCursor, [], :void],
      [:HideCursor, :HideCursor, [], :void],
      [:IsCursorHidden, :IsCursorHidden, [], :bool],
      [:EnableCursor, :EnableCursor, [], :void],
      [:DisableCursor, :DisableCursor, [], :void],
      [:IsCursorOnScreen, :IsCursorOnScreen, [], :bool],
      [:ClearBackground, :ClearBackground, [Color.by_value], :void],
      [:BeginDrawing, :BeginDrawing, [], :void],
      [:EndDrawing, :EndDrawing, [], :void],
      [:BeginMode2D, :BeginMode2D, [Camera2D.by_value], :void],
      [:EndMode2D, :EndMode2D, [], :void],
      [:BeginMode3D, :BeginMode3D, [Camera3D.by_value], :void],
      [:EndMode3D, :EndMode3D, [], :void],
      [:BeginTextureMode, :BeginTextureMode, [RenderTexture2D.by_value], :void],
      [:EndTextureMode, :EndTextureMode, [], :void],
      [:BeginShaderMode, :BeginShaderMode, [Shader.by_value], :void],
      [:EndShaderMode, :EndShaderMode, [], :void],
      [:BeginBlendMode, :BeginBlendMode, [:int], :void],
      [:EndBlendMode, :EndBlendMode, [], :void],
      [:BeginScissorMode, :BeginScissorMode, [:int, :int, :int, :int], :void],
      [:EndScissorMode, :EndScissorMode, [], :void],
      [:BeginVrStereoMode, :BeginVrStereoMode, [VrStereoConfig.by_value], :void],
      [:EndVrStereoMode, :EndVrStereoMode, [], :void],
      [:LoadVrStereoConfig, :LoadVrStereoConfig, [VrDeviceInfo.by_value], VrStereoConfig.by_value],
      [:UnloadVrStereoConfig, :UnloadVrStereoConfig, [VrStereoConfig.by_value], :void],
      [:LoadShader, :LoadShader, [:pointer, :pointer], Shader.by_value],
      [:LoadShaderFromMemory, :LoadShaderFromMemory, [:pointer, :pointer], Shader.by_value],
      [:GetShaderLocation, :GetShaderLocation, [Shader.by_value, :pointer], :int],
      [:GetShaderLocationAttrib, :GetShaderLocationAttrib, [Shader.by_value, :pointer], :int],
      [:SetShaderValue, :SetShaderValue, [Shader.by_value, :int, :pointer, :int], :void],
      [:SetShaderValueV, :SetShaderValueV, [Shader.by_value, :int, :pointer, :int, :int], :void],
      [:SetShaderValueMatrix, :SetShaderValueMatrix, [Shader.by_value, :int, Matrix.by_value], :void],
      [:SetShaderValueTexture, :SetShaderValueTexture, [Shader.by_value, :int, Texture2D.by_value], :void],
      [:UnloadShader, :UnloadShader, [Shader.by_value], :void],
      [:GetMouseRay, :GetMouseRay, [Vector2.by_value, Camera.by_value], Ray.by_value],
      [:GetCameraMatrix, :GetCameraMatrix, [Camera.by_value], Matrix.by_value],
      [:GetCameraMatrix2D, :GetCameraMatrix2D, [Camera2D.by_value], Matrix.by_value],
      [:GetWorldToScreen, :GetWorldToScreen, [Vector3.by_value, Camera.by_value], Vector2.by_value],
      [:GetScreenToWorld2D, :GetScreenToWorld2D, [Vector2.by_value, Camera2D.by_value], Vector2.by_value],
      [:GetWorldToScreenEx, :GetWorldToScreenEx, [Vector3.by_value, Camera.by_value, :int, :int], Vector2.by_value],
      [:GetWorldToScreen2D, :GetWorldToScreen2D, [Vector2.by_value, Camera2D.by_value], Vector2.by_value],
      [:SetTargetFPS, :SetTargetFPS, [:int], :void],
      [:GetFPS, :GetFPS, [], :int],
      [:GetFrameTime, :GetFrameTime, [], :float],
      [:GetTime, :GetTime, [], :double],
      [:GetRandomValue, :GetRandomValue, [:int, :int], :int],
      [:SetRandomSeed, :SetRandomSeed, [:uint], :void],
      [:TakeScreenshot, :TakeScreenshot, [:pointer], :void],
      [:SetConfigFlags, :SetConfigFlags, [:uint], :void],
      [:TraceLog, :TraceLog, [:int, :pointer, :varargs], :void],
      [:SetTraceLogLevel, :SetTraceLogLevel, [:int], :void],
      [:MemAlloc, :MemAlloc, [:uint], :pointer],
      [:MemRealloc, :MemRealloc, [:pointer, :uint], :pointer],
      [:MemFree, :MemFree, [:pointer], :void],
      [:OpenURL, :OpenURL, [:pointer], :void],
      [:SetTraceLogCallback, :SetTraceLogCallback, [:TraceLogCallback], :void],
      [:SetLoadFileDataCallback, :SetLoadFileDataCallback, [:LoadFileDataCallback], :void],
      [:SetSaveFileDataCallback, :SetSaveFileDataCallback, [:SaveFileDataCallback], :void],
      [:SetLoadFileTextCallback, :SetLoadFileTextCallback, [:LoadFileTextCallback], :void],
      [:SetSaveFileTextCallback, :SetSaveFileTextCallback, [:SaveFileTextCallback], :void],
      [:LoadFileData, :LoadFileData, [:pointer, :pointer], :pointer],
      [:UnloadFileData, :UnloadFileData, [:pointer], :void],
      [:SaveFileData, :SaveFileData, [:pointer, :pointer, :uint], :bool],
      [:ExportDataAsCode, :ExportDataAsCode, [:pointer, :uint, :pointer], :bool],
      [:LoadFileText, :LoadFileText, [:pointer], :pointer],
      [:UnloadFileText, :UnloadFileText, [:pointer], :void],
      [:SaveFileText, :SaveFileText, [:pointer, :pointer], :bool],
      [:FileExists, :FileExists, [:pointer], :bool],
      [:DirectoryExists, :DirectoryExists, [:pointer], :bool],
      [:IsFileExtension, :IsFileExtension, [:pointer, :pointer], :bool],
      [:GetFileLength, :GetFileLength, [:pointer], :int],
      [:GetFileExtension, :GetFileExtension, [:pointer], :pointer],
      [:GetFileName, :GetFileName, [:pointer], :pointer],
      [:GetFileNameWithoutExt, :GetFileNameWithoutExt, [:pointer], :pointer],
      [:GetDirectoryPath, :GetDirectoryPath, [:pointer], :pointer],
      [:GetPrevDirectoryPath, :GetPrevDirectoryPath, [:pointer], :pointer],
      [:GetWorkingDirectory, :GetWorkingDirectory, [], :pointer],
      [:GetApplicationDirectory, :GetApplicationDirectory, [], :pointer],
      [:ChangeDirectory, :ChangeDirectory, [:pointer], :bool],
      [:IsPathFile, :IsPathFile, [:pointer], :bool],
      [:LoadDirectoryFiles, :LoadDirectoryFiles, [:pointer], FilePathList.by_value],
      [:LoadDirectoryFilesEx, :LoadDirectoryFilesEx, [:pointer, :pointer, :bool], FilePathList.by_value],
      [:UnloadDirectoryFiles, :UnloadDirectoryFiles, [FilePathList.by_value], :void],
      [:IsFileDropped, :IsFileDropped, [], :bool],
      [:LoadDroppedFiles, :LoadDroppedFiles, [], FilePathList.by_value],
      [:UnloadDroppedFiles, :UnloadDroppedFiles, [FilePathList.by_value], :void],
      [:GetFileModTime, :GetFileModTime, [:pointer], :long],
      [:CompressData, :CompressData, [:pointer, :int, :pointer], :pointer],
      [:DecompressData, :DecompressData, [:pointer, :int, :pointer], :pointer],
      [:EncodeDataBase64, :EncodeDataBase64, [:pointer, :int, :pointer], :pointer],
      [:DecodeDataBase64, :DecodeDataBase64, [:pointer, :pointer], :pointer],
      [:IsKeyPressed, :IsKeyPressed, [:int], :bool],
      [:IsKeyDown, :IsKeyDown, [:int], :bool],
      [:IsKeyReleased, :IsKeyReleased, [:int], :bool],
      [:IsKeyUp, :IsKeyUp, [:int], :bool],
      [:SetExitKey, :SetExitKey, [:int], :void],
      [:GetKeyPressed, :GetKeyPressed, [], :int],
      [:GetCharPressed, :GetCharPressed, [], :int],
      [:IsGamepadAvailable, :IsGamepadAvailable, [:int], :bool],
      [:GetGamepadName, :GetGamepadName, [:int], :pointer],
      [:IsGamepadButtonPressed, :IsGamepadButtonPressed, [:int, :int], :bool],
      [:IsGamepadButtonDown, :IsGamepadButtonDown, [:int, :int], :bool],
      [:IsGamepadButtonReleased, :IsGamepadButtonReleased, [:int, :int], :bool],
      [:IsGamepadButtonUp, :IsGamepadButtonUp, [:int, :int], :bool],
      [:GetGamepadButtonPressed, :GetGamepadButtonPressed, [], :int],
      [:GetGamepadAxisCount, :GetGamepadAxisCount, [:int], :int],
      [:GetGamepadAxisMovement, :GetGamepadAxisMovement, [:int, :int], :float],
      [:SetGamepadMappings, :SetGamepadMappings, [:pointer], :int],
      [:IsMouseButtonPressed, :IsMouseButtonPressed, [:int], :bool],
      [:IsMouseButtonDown, :IsMouseButtonDown, [:int], :bool],
      [:IsMouseButtonReleased, :IsMouseButtonReleased, [:int], :bool],
      [:IsMouseButtonUp, :IsMouseButtonUp, [:int], :bool],
      [:GetMouseX, :GetMouseX, [], :int],
      [:GetMouseY, :GetMouseY, [], :int],
      [:GetMousePosition, :GetMousePosition, [], Vector2.by_value],
      [:GetMouseDelta, :GetMouseDelta, [], Vector2.by_value],
      [:SetMousePosition, :SetMousePosition, [:int, :int], :void],
      [:SetMouseOffset, :SetMouseOffset, [:int, :int], :void],
      [:SetMouseScale, :SetMouseScale, [:float, :float], :void],
      [:GetMouseWheelMove, :GetMouseWheelMove, [], :float],
      [:GetMouseWheelMoveV, :GetMouseWheelMoveV, [], Vector2.by_value],
      [:SetMouseCursor, :SetMouseCursor, [:int], :void],
      [:GetTouchX, :GetTouchX, [], :int],
      [:GetTouchY, :GetTouchY, [], :int],
      [:GetTouchPosition, :GetTouchPosition, [:int], Vector2.by_value],
      [:GetTouchPointId, :GetTouchPointId, [:int], :int],
      [:GetTouchPointCount, :GetTouchPointCount, [], :int],
      [:SetGesturesEnabled, :SetGesturesEnabled, [:uint], :void],
      [:IsGestureDetected, :IsGestureDetected, [:int], :bool],
      [:GetGestureDetected, :GetGestureDetected, [], :int],
      [:GetGestureHoldDuration, :GetGestureHoldDuration, [], :float],
      [:GetGestureDragVector, :GetGestureDragVector, [], Vector2.by_value],
      [:GetGestureDragAngle, :GetGestureDragAngle, [], :float],
      [:GetGesturePinchVector, :GetGesturePinchVector, [], Vector2.by_value],
      [:GetGesturePinchAngle, :GetGesturePinchAngle, [], :float],
      [:SetCameraMode, :SetCameraMode, [Camera.by_value, :int], :void],
      [:UpdateCamera, :UpdateCamera, [:pointer], :void],
      [:SetCameraPanControl, :SetCameraPanControl, [:int], :void],
      [:SetCameraAltControl, :SetCameraAltControl, [:int], :void],
      [:SetCameraSmoothZoomControl, :SetCameraSmoothZoomControl, [:int], :void],
      [:SetCameraMoveControls, :SetCameraMoveControls, [:int, :int, :int, :int, :int, :int], :void],
      [:SetShapesTexture, :SetShapesTexture, [Texture2D.by_value, Rectangle.by_value], :void],
      [:DrawPixel, :DrawPixel, [:int, :int, Color.by_value], :void],
      [:DrawPixelV, :DrawPixelV, [Vector2.by_value, Color.by_value], :void],
      [:DrawLine, :DrawLine, [:int, :int, :int, :int, Color.by_value], :void],
      [:DrawLineV, :DrawLineV, [Vector2.by_value, Vector2.by_value, Color.by_value], :void],
      [:DrawLineEx, :DrawLineEx, [Vector2.by_value, Vector2.by_value, :float, Color.by_value], :void],
      [:DrawLineBezier, :DrawLineBezier, [Vector2.by_value, Vector2.by_value, :float, Color.by_value], :void],
      [:DrawLineBezierQuad, :DrawLineBezierQuad, [Vector2.by_value, Vector2.by_value, Vector2.by_value, :float, Color.by_value], :void],
      [:DrawLineBezierCubic, :DrawLineBezierCubic, [Vector2.by_value, Vector2.by_value, Vector2.by_value, Vector2.by_value, :float, Color.by_value], :void],
      [:DrawLineStrip, :DrawLineStrip, [:pointer, :int, Color.by_value], :void],
      [:DrawCircle, :DrawCircle, [:int, :int, :float, Color.by_value], :void],
      [:DrawCircleSector, :DrawCircleSector, [Vector2.by_value, :float, :float, :float, :int, Color.by_value], :void],
      [:DrawCircleSectorLines, :DrawCircleSectorLines, [Vector2.by_value, :float, :float, :float, :int, Color.by_value], :void],
      [:DrawCircleGradient, :DrawCircleGradient, [:int, :int, :float, Color.by_value, Color.by_value], :void],
      [:DrawCircleV, :DrawCircleV, [Vector2.by_value, :float, Color.by_value], :void],
      [:DrawCircleLines, :DrawCircleLines, [:int, :int, :float, Color.by_value], :void],
      [:DrawEllipse, :DrawEllipse, [:int, :int, :float, :float, Color.by_value], :void],
      [:DrawEllipseLines, :DrawEllipseLines, [:int, :int, :float, :float, Color.by_value], :void],
      [:DrawRing, :DrawRing, [Vector2.by_value, :float, :float, :float, :float, :int, Color.by_value], :void],
      [:DrawRingLines, :DrawRingLines, [Vector2.by_value, :float, :float, :float, :float, :int, Color.by_value], :void],
      [:DrawRectangle, :DrawRectangle, [:int, :int, :int, :int, Color.by_value], :void],
      [:DrawRectangleV, :DrawRectangleV, [Vector2.by_value, Vector2.by_value, Color.by_value], :void],
      [:DrawRectangleRec, :DrawRectangleRec, [Rectangle.by_value, Color.by_value], :void],
      [:DrawRectanglePro, :DrawRectanglePro, [Rectangle.by_value, Vector2.by_value, :float, Color.by_value], :void],
      [:DrawRectangleGradientV, :DrawRectangleGradientV, [:int, :int, :int, :int, Color.by_value, Color.by_value], :void],
      [:DrawRectangleGradientH, :DrawRectangleGradientH, [:int, :int, :int, :int, Color.by_value, Color.by_value], :void],
      [:DrawRectangleGradientEx, :DrawRectangleGradientEx, [Rectangle.by_value, Color.by_value, Color.by_value, Color.by_value, Color.by_value], :void],
      [:DrawRectangleLines, :DrawRectangleLines, [:int, :int, :int, :int, Color.by_value], :void],
      [:DrawRectangleLinesEx, :DrawRectangleLinesEx, [Rectangle.by_value, :float, Color.by_value], :void],
      [:DrawRectangleRounded, :DrawRectangleRounded, [Rectangle.by_value, :float, :int, Color.by_value], :void],
      [:DrawRectangleRoundedLines, :DrawRectangleRoundedLines, [Rectangle.by_value, :float, :int, :float, Color.by_value], :void],
      [:DrawTriangle, :DrawTriangle, [Vector2.by_value, Vector2.by_value, Vector2.by_value, Color.by_value], :void],
      [:DrawTriangleLines, :DrawTriangleLines, [Vector2.by_value, Vector2.by_value, Vector2.by_value, Color.by_value], :void],
      [:DrawTriangleFan, :DrawTriangleFan, [:pointer, :int, Color.by_value], :void],
      [:DrawTriangleStrip, :DrawTriangleStrip, [:pointer, :int, Color.by_value], :void],
      [:DrawPoly, :DrawPoly, [Vector2.by_value, :int, :float, :float, Color.by_value], :void],
      [:DrawPolyLines, :DrawPolyLines, [Vector2.by_value, :int, :float, :float, Color.by_value], :void],
      [:DrawPolyLinesEx, :DrawPolyLinesEx, [Vector2.by_value, :int, :float, :float, :float, Color.by_value], :void],
      [:CheckCollisionRecs, :CheckCollisionRecs, [Rectangle.by_value, Rectangle.by_value], :bool],
      [:CheckCollisionCircles, :CheckCollisionCircles, [Vector2.by_value, :float, Vector2.by_value, :float], :bool],
      [:CheckCollisionCircleRec, :CheckCollisionCircleRec, [Vector2.by_value, :float, Rectangle.by_value], :bool],
      [:CheckCollisionPointRec, :CheckCollisionPointRec, [Vector2.by_value, Rectangle.by_value], :bool],
      [:CheckCollisionPointCircle, :CheckCollisionPointCircle, [Vector2.by_value, Vector2.by_value, :float], :bool],
      [:CheckCollisionPointTriangle, :CheckCollisionPointTriangle, [Vector2.by_value, Vector2.by_value, Vector2.by_value, Vector2.by_value], :bool],
      [:CheckCollisionPointPoly, :CheckCollisionPointPoly, [Vector2.by_value, :pointer, :int], :bool],
      [:CheckCollisionLines, :CheckCollisionLines, [Vector2.by_value, Vector2.by_value, Vector2.by_value, Vector2.by_value, :pointer], :bool],
      [:CheckCollisionPointLine, :CheckCollisionPointLine, [Vector2.by_value, Vector2.by_value, Vector2.by_value, :int], :bool],
      [:GetCollisionRec, :GetCollisionRec, [Rectangle.by_value, Rectangle.by_value], Rectangle.by_value],
      [:LoadImage, :LoadImage, [:pointer], Image.by_value],
      [:LoadImageRaw, :LoadImageRaw, [:pointer, :int, :int, :int, :int], Image.by_value],
      [:LoadImageAnim, :LoadImageAnim, [:pointer, :pointer], Image.by_value],
      [:LoadImageFromMemory, :LoadImageFromMemory, [:pointer, :pointer, :int], Image.by_value],
      [:LoadImageFromTexture, :LoadImageFromTexture, [Texture2D.by_value], Image.by_value],
      [:LoadImageFromScreen, :LoadImageFromScreen, [], Image.by_value],
      [:UnloadImage, :UnloadImage, [Image.by_value], :void],
      [:ExportImage, :ExportImage, [Image.by_value, :pointer], :bool],
      [:ExportImageAsCode, :ExportImageAsCode, [Image.by_value, :pointer], :bool],
      [:GenImageColor, :GenImageColor, [:int, :int, Color.by_value], Image.by_value],
      [:GenImageGradientV, :GenImageGradientV, [:int, :int, Color.by_value, Color.by_value], Image.by_value],
      [:GenImageGradientH, :GenImageGradientH, [:int, :int, Color.by_value, Color.by_value], Image.by_value],
      [:GenImageGradientRadial, :GenImageGradientRadial, [:int, :int, :float, Color.by_value, Color.by_value], Image.by_value],
      [:GenImageChecked, :GenImageChecked, [:int, :int, :int, :int, Color.by_value, Color.by_value], Image.by_value],
      [:GenImageWhiteNoise, :GenImageWhiteNoise, [:int, :int, :float], Image.by_value],
      [:GenImagePerlinNoise, :GenImagePerlinNoise, [:int, :int, :int, :int, :float], Image.by_value],
      [:GenImageCellular, :GenImageCellular, [:int, :int, :int], Image.by_value],
      [:GenImageText, :GenImageText, [:int, :int, :pointer], Image.by_value],
      [:ImageCopy, :ImageCopy, [Image.by_value], Image.by_value],
      [:ImageFromImage, :ImageFromImage, [Image.by_value, Rectangle.by_value], Image.by_value],
      [:ImageText, :ImageText, [:pointer, :int, Color.by_value], Image.by_value],
      [:ImageTextEx, :ImageTextEx, [Font.by_value, :pointer, :float, :float, Color.by_value], Image.by_value],
      [:ImageFormat, :ImageFormat, [:pointer, :int], :void],
      [:ImageToPOT, :ImageToPOT, [:pointer, Color.by_value], :void],
      [:ImageCrop, :ImageCrop, [:pointer, Rectangle.by_value], :void],
      [:ImageAlphaCrop, :ImageAlphaCrop, [:pointer, :float], :void],
      [:ImageAlphaClear, :ImageAlphaClear, [:pointer, Color.by_value, :float], :void],
      [:ImageAlphaMask, :ImageAlphaMask, [:pointer, Image.by_value], :void],
      [:ImageAlphaPremultiply, :ImageAlphaPremultiply, [:pointer], :void],
      [:ImageBlurGaussian, :ImageBlurGaussian, [:pointer, :int], :void],
      [:ImageResize, :ImageResize, [:pointer, :int, :int], :void],
      [:ImageResizeNN, :ImageResizeNN, [:pointer, :int, :int], :void],
      [:ImageResizeCanvas, :ImageResizeCanvas, [:pointer, :int, :int, :int, :int, Color.by_value], :void],
      [:ImageMipmaps, :ImageMipmaps, [:pointer], :void],
      [:ImageDither, :ImageDither, [:pointer, :int, :int, :int, :int], :void],
      [:ImageFlipVertical, :ImageFlipVertical, [:pointer], :void],
      [:ImageFlipHorizontal, :ImageFlipHorizontal, [:pointer], :void],
      [:ImageRotateCW, :ImageRotateCW, [:pointer], :void],
      [:ImageRotateCCW, :ImageRotateCCW, [:pointer], :void],
      [:ImageColorTint, :ImageColorTint, [:pointer, Color.by_value], :void],
      [:ImageColorInvert, :ImageColorInvert, [:pointer], :void],
      [:ImageColorGrayscale, :ImageColorGrayscale, [:pointer], :void],
      [:ImageColorContrast, :ImageColorContrast, [:pointer, :float], :void],
      [:ImageColorBrightness, :ImageColorBrightness, [:pointer, :int], :void],
      [:ImageColorReplace, :ImageColorReplace, [:pointer, Color.by_value, Color.by_value], :void],
      [:LoadImageColors, :LoadImageColors, [Image.by_value], :pointer],
      [:LoadImagePalette, :LoadImagePalette, [Image.by_value, :int, :pointer], :pointer],
      [:UnloadImageColors, :UnloadImageColors, [:pointer], :void],
      [:UnloadImagePalette, :UnloadImagePalette, [:pointer], :void],
      [:GetImageAlphaBorder, :GetImageAlphaBorder, [Image.by_value, :float], Rectangle.by_value],
      [:GetImageColor, :GetImageColor, [Image.by_value, :int, :int], Color.by_value],
      [:ImageClearBackground, :ImageClearBackground, [:pointer, Color.by_value], :void],
      [:ImageDrawPixel, :ImageDrawPixel, [:pointer, :int, :int, Color.by_value], :void],
      [:ImageDrawPixelV, :ImageDrawPixelV, [:pointer, Vector2.by_value, Color.by_value], :void],
      [:ImageDrawLine, :ImageDrawLine, [:pointer, :int, :int, :int, :int, Color.by_value], :void],
      [:ImageDrawLineV, :ImageDrawLineV, [:pointer, Vector2.by_value, Vector2.by_value, Color.by_value], :void],
      [:ImageDrawCircle, :ImageDrawCircle, [:pointer, :int, :int, :int, Color.by_value], :void],
      [:ImageDrawCircleV, :ImageDrawCircleV, [:pointer, Vector2.by_value, :int, Color.by_value], :void],
      [:ImageDrawCircleLines, :ImageDrawCircleLines, [:pointer, :int, :int, :int, Color.by_value], :void],
      [:ImageDrawCircleLinesV, :ImageDrawCircleLinesV, [:pointer, Vector2.by_value, :int, Color.by_value], :void],
      [:ImageDrawRectangle, :ImageDrawRectangle, [:pointer, :int, :int, :int, :int, Color.by_value], :void],
      [:ImageDrawRectangleV, :ImageDrawRectangleV, [:pointer, Vector2.by_value, Vector2.by_value, Color.by_value], :void],
      [:ImageDrawRectangleRec, :ImageDrawRectangleRec, [:pointer, Rectangle.by_value, Color.by_value], :void],
      [:ImageDrawRectangleLines, :ImageDrawRectangleLines, [:pointer, Rectangle.by_value, :int, Color.by_value], :void],
      [:ImageDraw, :ImageDraw, [:pointer, Image.by_value, Rectangle.by_value, Rectangle.by_value, Color.by_value], :void],
      [:ImageDrawText, :ImageDrawText, [:pointer, :pointer, :int, :int, :int, Color.by_value], :void],
      [:ImageDrawTextEx, :ImageDrawTextEx, [:pointer, Font.by_value, :pointer, Vector2.by_value, :float, :float, Color.by_value], :void],
      [:LoadTexture, :LoadTexture, [:pointer], Texture2D.by_value],
      [:LoadTextureFromImage, :LoadTextureFromImage, [Image.by_value], Texture2D.by_value],
      [:LoadTextureCubemap, :LoadTextureCubemap, [Image.by_value, :int], TextureCubemap.by_value],
      [:LoadRenderTexture, :LoadRenderTexture, [:int, :int], RenderTexture2D.by_value],
      [:UnloadTexture, :UnloadTexture, [Texture2D.by_value], :void],
      [:UnloadRenderTexture, :UnloadRenderTexture, [RenderTexture2D.by_value], :void],
      [:UpdateTexture, :UpdateTexture, [Texture2D.by_value, :pointer], :void],
      [:UpdateTextureRec, :UpdateTextureRec, [Texture2D.by_value, Rectangle.by_value, :pointer], :void],
      [:GenTextureMipmaps, :GenTextureMipmaps, [:pointer], :void],
      [:SetTextureFilter, :SetTextureFilter, [Texture2D.by_value, :int], :void],
      [:SetTextureWrap, :SetTextureWrap, [Texture2D.by_value, :int], :void],
      [:DrawTexture, :DrawTexture, [Texture2D.by_value, :int, :int, Color.by_value], :void],
      [:DrawTextureV, :DrawTextureV, [Texture2D.by_value, Vector2.by_value, Color.by_value], :void],
      [:DrawTextureEx, :DrawTextureEx, [Texture2D.by_value, Vector2.by_value, :float, :float, Color.by_value], :void],
      [:DrawTextureRec, :DrawTextureRec, [Texture2D.by_value, Rectangle.by_value, Vector2.by_value, Color.by_value], :void],
      [:DrawTexturePro, :DrawTexturePro, [Texture2D.by_value, Rectangle.by_value, Rectangle.by_value, Vector2.by_value, :float, Color.by_value], :void],
      [:DrawTextureNPatch, :DrawTextureNPatch, [Texture2D.by_value, NPatchInfo.by_value, Rectangle.by_value, Vector2.by_value, :float, Color.by_value], :void],
      [:Fade, :Fade, [Color.by_value, :float], Color.by_value],
      [:ColorToInt, :ColorToInt, [Color.by_value], :int],
      [:ColorNormalize, :ColorNormalize, [Color.by_value], Vector4.by_value],
      [:ColorFromNormalized, :ColorFromNormalized, [Vector4.by_value], Color.by_value],
      [:ColorToHSV, :ColorToHSV, [Color.by_value], Vector3.by_value],
      [:ColorFromHSV, :ColorFromHSV, [:float, :float, :float], Color.by_value],
      [:ColorTint, :ColorTint, [Color.by_value, Color.by_value], Color.by_value],
      [:ColorBrightness, :ColorBrightness, [Color.by_value, :float], Color.by_value],
      [:ColorContrast, :ColorContrast, [Color.by_value, :float], Color.by_value],
      [:ColorAlpha, :ColorAlpha, [Color.by_value, :float], Color.by_value],
      [:ColorAlphaBlend, :ColorAlphaBlend, [Color.by_value, Color.by_value, Color.by_value], Color.by_value],
      [:GetColor, :GetColor, [:uint], Color.by_value],
      [:GetPixelColor, :GetPixelColor, [:pointer, :int], Color.by_value],
      [:SetPixelColor, :SetPixelColor, [:pointer, Color.by_value, :int], :void],
      [:GetPixelDataSize, :GetPixelDataSize, [:int, :int, :int], :int],
      [:GetFontDefault, :GetFontDefault, [], Font.by_value],
      [:LoadFont, :LoadFont, [:pointer], Font.by_value],
      [:LoadFontEx, :LoadFontEx, [:pointer, :int, :pointer, :int], Font.by_value],
      [:LoadFontFromImage, :LoadFontFromImage, [Image.by_value, Color.by_value, :int], Font.by_value],
      [:LoadFontFromMemory, :LoadFontFromMemory, [:pointer, :pointer, :int, :int, :pointer, :int], Font.by_value],
      [:LoadFontData, :LoadFontData, [:pointer, :int, :int, :pointer, :int, :int], :pointer],
      [:GenImageFontAtlas, :GenImageFontAtlas, [:pointer, :pointer, :int, :int, :int, :int], Image.by_value],
      [:UnloadFontData, :UnloadFontData, [:pointer, :int], :void],
      [:UnloadFont, :UnloadFont, [Font.by_value], :void],
      [:ExportFontAsCode, :ExportFontAsCode, [Font.by_value, :pointer], :bool],
      [:DrawFPS, :DrawFPS, [:int, :int], :void],
      [:DrawText, :DrawText, [:pointer, :int, :int, :int, Color.by_value], :void],
      [:DrawTextEx, :DrawTextEx, [Font.by_value, :pointer, Vector2.by_value, :float, :float, Color.by_value], :void],
      [:DrawTextPro, :DrawTextPro, [Font.by_value, :pointer, Vector2.by_value, Vector2.by_value, :float, :float, :float, Color.by_value], :void],
      [:DrawTextCodepoint, :DrawTextCodepoint, [Font.by_value, :int, Vector2.by_value, :float, Color.by_value], :void],
      [:DrawTextCodepoints, :DrawTextCodepoints, [Font.by_value, :pointer, :int, Vector2.by_value, :float, :float, Color.by_value], :void],
      [:MeasureText, :MeasureText, [:pointer, :int], :int],
      [:MeasureTextEx, :MeasureTextEx, [Font.by_value, :pointer, :float, :float], Vector2.by_value],
      [:GetGlyphIndex, :GetGlyphIndex, [Font.by_value, :int], :int],
      [:GetGlyphInfo, :GetGlyphInfo, [Font.by_value, :int], GlyphInfo.by_value],
      [:GetGlyphAtlasRec, :GetGlyphAtlasRec, [Font.by_value, :int], Rectangle.by_value],
      [:LoadUTF8, :LoadUTF8, [:pointer, :int], :pointer],
      [:UnloadUTF8, :UnloadUTF8, [:pointer], :void],
      [:LoadCodepoints, :LoadCodepoints, [:pointer, :pointer], :pointer],
      [:UnloadCodepoints, :UnloadCodepoints, [:pointer], :void],
      [:GetCodepointCount, :GetCodepointCount, [:pointer], :int],
      [:GetCodepoint, :GetCodepoint, [:pointer, :pointer], :int],
      [:GetCodepointNext, :GetCodepointNext, [:pointer, :pointer], :int],
      [:GetCodepointPrevious, :GetCodepointPrevious, [:pointer, :pointer], :int],
      [:CodepointToUTF8, :CodepointToUTF8, [:int, :pointer], :pointer],
      [:TextCopy, :TextCopy, [:pointer, :pointer], :int],
      [:TextIsEqual, :TextIsEqual, [:pointer, :pointer], :bool],
      [:TextLength, :TextLength, [:pointer], :uint],
      [:TextFormat, :TextFormat, [:pointer, :varargs], :pointer],
      [:TextSubtext, :TextSubtext, [:pointer, :int, :int], :pointer],
      [:TextReplace, :TextReplace, [:pointer, :pointer, :pointer], :pointer],
      [:TextInsert, :TextInsert, [:pointer, :pointer, :int], :pointer],
      [:TextJoin, :TextJoin, [:pointer, :int, :pointer], :pointer],
      [:TextSplit, :TextSplit, [:pointer, :char, :pointer], :pointer],
      [:TextAppend, :TextAppend, [:pointer, :pointer, :pointer], :void],
      [:TextFindIndex, :TextFindIndex, [:pointer, :pointer], :int],
      [:TextToUpper, :TextToUpper, [:pointer], :pointer],
      [:TextToLower, :TextToLower, [:pointer], :pointer],
      [:TextToPascal, :TextToPascal, [:pointer], :pointer],
      [:TextToInteger, :TextToInteger, [:pointer], :int],
      [:DrawLine3D, :DrawLine3D, [Vector3.by_value, Vector3.by_value, Color.by_value], :void],
      [:DrawPoint3D, :DrawPoint3D, [Vector3.by_value, Color.by_value], :void],
      [:DrawCircle3D, :DrawCircle3D, [Vector3.by_value, :float, Vector3.by_value, :float, Color.by_value], :void],
      [:DrawTriangle3D, :DrawTriangle3D, [Vector3.by_value, Vector3.by_value, Vector3.by_value, Color.by_value], :void],
      [:DrawTriangleStrip3D, :DrawTriangleStrip3D, [:pointer, :int, Color.by_value], :void],
      [:DrawCube, :DrawCube, [Vector3.by_value, :float, :float, :float, Color.by_value], :void],
      [:DrawCubeV, :DrawCubeV, [Vector3.by_value, Vector3.by_value, Color.by_value], :void],
      [:DrawCubeWires, :DrawCubeWires, [Vector3.by_value, :float, :float, :float, Color.by_value], :void],
      [:DrawCubeWiresV, :DrawCubeWiresV, [Vector3.by_value, Vector3.by_value, Color.by_value], :void],
      [:DrawSphere, :DrawSphere, [Vector3.by_value, :float, Color.by_value], :void],
      [:DrawSphereEx, :DrawSphereEx, [Vector3.by_value, :float, :int, :int, Color.by_value], :void],
      [:DrawSphereWires, :DrawSphereWires, [Vector3.by_value, :float, :int, :int, Color.by_value], :void],
      [:DrawCylinder, :DrawCylinder, [Vector3.by_value, :float, :float, :float, :int, Color.by_value], :void],
      [:DrawCylinderEx, :DrawCylinderEx, [Vector3.by_value, Vector3.by_value, :float, :float, :int, Color.by_value], :void],
      [:DrawCylinderWires, :DrawCylinderWires, [Vector3.by_value, :float, :float, :float, :int, Color.by_value], :void],
      [:DrawCylinderWiresEx, :DrawCylinderWiresEx, [Vector3.by_value, Vector3.by_value, :float, :float, :int, Color.by_value], :void],
      [:DrawCapsule, :DrawCapsule, [Vector3.by_value, Vector3.by_value, :float, :int, :int, Color.by_value], :void],
      [:DrawCapsuleWires, :DrawCapsuleWires, [Vector3.by_value, Vector3.by_value, :float, :int, :int, Color.by_value], :void],
      [:DrawPlane, :DrawPlane, [Vector3.by_value, Vector2.by_value, Color.by_value], :void],
      [:DrawRay, :DrawRay, [Ray.by_value, Color.by_value], :void],
      [:DrawGrid, :DrawGrid, [:int, :float], :void],
      [:LoadModel, :LoadModel, [:pointer], Model.by_value],
      [:LoadModelFromMesh, :LoadModelFromMesh, [Mesh.by_value], Model.by_value],
      [:UnloadModel, :UnloadModel, [Model.by_value], :void],
      [:UnloadModelKeepMeshes, :UnloadModelKeepMeshes, [Model.by_value], :void],
      [:GetModelBoundingBox, :GetModelBoundingBox, [Model.by_value], BoundingBox.by_value],
      [:DrawModel, :DrawModel, [Model.by_value, Vector3.by_value, :float, Color.by_value], :void],
      [:DrawModelEx, :DrawModelEx, [Model.by_value, Vector3.by_value, Vector3.by_value, :float, Vector3.by_value, Color.by_value], :void],
      [:DrawModelWires, :DrawModelWires, [Model.by_value, Vector3.by_value, :float, Color.by_value], :void],
      [:DrawModelWiresEx, :DrawModelWiresEx, [Model.by_value, Vector3.by_value, Vector3.by_value, :float, Vector3.by_value, Color.by_value], :void],
      [:DrawBoundingBox, :DrawBoundingBox, [BoundingBox.by_value, Color.by_value], :void],
      [:DrawBillboard, :DrawBillboard, [Camera.by_value, Texture2D.by_value, Vector3.by_value, :float, Color.by_value], :void],
      [:DrawBillboardRec, :DrawBillboardRec, [Camera.by_value, Texture2D.by_value, Rectangle.by_value, Vector3.by_value, Vector2.by_value, Color.by_value], :void],
      [:DrawBillboardPro, :DrawBillboardPro, [Camera.by_value, Texture2D.by_value, Rectangle.by_value, Vector3.by_value, Vector3.by_value, Vector2.by_value, Vector2.by_value, :float, Color.by_value], :void],
      [:UploadMesh, :UploadMesh, [:pointer, :bool], :void],
      [:UpdateMeshBuffer, :UpdateMeshBuffer, [Mesh.by_value, :int, :pointer, :int, :int], :void],
      [:UnloadMesh, :UnloadMesh, [Mesh.by_value], :void],
      [:DrawMesh, :DrawMesh, [Mesh.by_value, Material.by_value, Matrix.by_value], :void],
      [:DrawMeshInstanced, :DrawMeshInstanced, [Mesh.by_value, Material.by_value, :pointer, :int], :void],
      [:ExportMesh, :ExportMesh, [Mesh.by_value, :pointer], :bool],
      [:GetMeshBoundingBox, :GetMeshBoundingBox, [Mesh.by_value], BoundingBox.by_value],
      [:GenMeshTangents, :GenMeshTangents, [:pointer], :void],
      [:GenMeshPoly, :GenMeshPoly, [:int, :float], Mesh.by_value],
      [:GenMeshPlane, :GenMeshPlane, [:float, :float, :int, :int], Mesh.by_value],
      [:GenMeshCube, :GenMeshCube, [:float, :float, :float], Mesh.by_value],
      [:GenMeshSphere, :GenMeshSphere, [:float, :int, :int], Mesh.by_value],
      [:GenMeshHemiSphere, :GenMeshHemiSphere, [:float, :int, :int], Mesh.by_value],
      [:GenMeshCylinder, :GenMeshCylinder, [:float, :float, :int], Mesh.by_value],
      [:GenMeshCone, :GenMeshCone, [:float, :float, :int], Mesh.by_value],
      [:GenMeshTorus, :GenMeshTorus, [:float, :float, :int, :int], Mesh.by_value],
      [:GenMeshKnot, :GenMeshKnot, [:float, :float, :int, :int], Mesh.by_value],
      [:GenMeshHeightmap, :GenMeshHeightmap, [Image.by_value, Vector3.by_value], Mesh.by_value],
      [:GenMeshCubicmap, :GenMeshCubicmap, [Image.by_value, Vector3.by_value], Mesh.by_value],
      [:LoadMaterials, :LoadMaterials, [:pointer, :pointer], :pointer],
      [:LoadMaterialDefault, :LoadMaterialDefault, [], Material.by_value],
      [:UnloadMaterial, :UnloadMaterial, [Material.by_value], :void],
      [:SetMaterialTexture, :SetMaterialTexture, [:pointer, :int, Texture2D.by_value], :void],
      [:SetModelMeshMaterial, :SetModelMeshMaterial, [:pointer, :int, :int], :void],
      [:LoadModelAnimations, :LoadModelAnimations, [:pointer, :pointer], :pointer],
      [:UpdateModelAnimation, :UpdateModelAnimation, [Model.by_value, ModelAnimation.by_value, :int], :void],
      [:UnloadModelAnimation, :UnloadModelAnimation, [ModelAnimation.by_value], :void],
      [:UnloadModelAnimations, :UnloadModelAnimations, [:pointer, :uint], :void],
      [:IsModelAnimationValid, :IsModelAnimationValid, [Model.by_value, ModelAnimation.by_value], :bool],
      [:CheckCollisionSpheres, :CheckCollisionSpheres, [Vector3.by_value, :float, Vector3.by_value, :float], :bool],
      [:CheckCollisionBoxes, :CheckCollisionBoxes, [BoundingBox.by_value, BoundingBox.by_value], :bool],
      [:CheckCollisionBoxSphere, :CheckCollisionBoxSphere, [BoundingBox.by_value, Vector3.by_value, :float], :bool],
      [:GetRayCollisionSphere, :GetRayCollisionSphere, [Ray.by_value, Vector3.by_value, :float], RayCollision.by_value],
      [:GetRayCollisionBox, :GetRayCollisionBox, [Ray.by_value, BoundingBox.by_value], RayCollision.by_value],
      [:GetRayCollisionMesh, :GetRayCollisionMesh, [Ray.by_value, Mesh.by_value, Matrix.by_value], RayCollision.by_value],
      [:GetRayCollisionTriangle, :GetRayCollisionTriangle, [Ray.by_value, Vector3.by_value, Vector3.by_value, Vector3.by_value], RayCollision.by_value],
      [:GetRayCollisionQuad, :GetRayCollisionQuad, [Ray.by_value, Vector3.by_value, Vector3.by_value, Vector3.by_value, Vector3.by_value], RayCollision.by_value],
      [:InitAudioDevice, :InitAudioDevice, [], :void],
      [:CloseAudioDevice, :CloseAudioDevice, [], :void],
      [:IsAudioDeviceReady, :IsAudioDeviceReady, [], :bool],
      [:SetMasterVolume, :SetMasterVolume, [:float], :void],
      [:LoadWave, :LoadWave, [:pointer], Wave.by_value],
      [:LoadWaveFromMemory, :LoadWaveFromMemory, [:pointer, :pointer, :int], Wave.by_value],
      [:LoadSound, :LoadSound, [:pointer], Sound.by_value],
      [:LoadSoundFromWave, :LoadSoundFromWave, [Wave.by_value], Sound.by_value],
      [:UpdateSound, :UpdateSound, [Sound.by_value, :pointer, :int], :void],
      [:UnloadWave, :UnloadWave, [Wave.by_value], :void],
      [:UnloadSound, :UnloadSound, [Sound.by_value], :void],
      [:ExportWave, :ExportWave, [Wave.by_value, :pointer], :bool],
      [:ExportWaveAsCode, :ExportWaveAsCode, [Wave.by_value, :pointer], :bool],
      [:PlaySound, :PlaySound, [Sound.by_value], :void],
      [:StopSound, :StopSound, [Sound.by_value], :void],
      [:PauseSound, :PauseSound, [Sound.by_value], :void],
      [:ResumeSound, :ResumeSound, [Sound.by_value], :void],
      [:PlaySoundMulti, :PlaySoundMulti, [Sound.by_value], :void],
      [:StopSoundMulti, :StopSoundMulti, [], :void],
      [:GetSoundsPlaying, :GetSoundsPlaying, [], :int],
      [:IsSoundPlaying, :IsSoundPlaying, [Sound.by_value], :bool],
      [:SetSoundVolume, :SetSoundVolume, [Sound.by_value, :float], :void],
      [:SetSoundPitch, :SetSoundPitch, [Sound.by_value, :float], :void],
      [:SetSoundPan, :SetSoundPan, [Sound.by_value, :float], :void],
      [:WaveCopy, :WaveCopy, [Wave.by_value], Wave.by_value],
      [:WaveCrop, :WaveCrop, [:pointer, :int, :int], :void],
      [:WaveFormat, :WaveFormat, [:pointer, :int, :int, :int], :void],
      [:LoadWaveSamples, :LoadWaveSamples, [Wave.by_value], :pointer],
      [:UnloadWaveSamples, :UnloadWaveSamples, [:pointer], :void],
      [:LoadMusicStream, :LoadMusicStream, [:pointer], Music.by_value],
      [:LoadMusicStreamFromMemory, :LoadMusicStreamFromMemory, [:pointer, :pointer, :int], Music.by_value],
      [:UnloadMusicStream, :UnloadMusicStream, [Music.by_value], :void],
      [:PlayMusicStream, :PlayMusicStream, [Music.by_value], :void],
      [:IsMusicStreamPlaying, :IsMusicStreamPlaying, [Music.by_value], :bool],
      [:UpdateMusicStream, :UpdateMusicStream, [Music.by_value], :void],
      [:StopMusicStream, :StopMusicStream, [Music.by_value], :void],
      [:PauseMusicStream, :PauseMusicStream, [Music.by_value], :void],
      [:ResumeMusicStream, :ResumeMusicStream, [Music.by_value], :void],
      [:SeekMusicStream, :SeekMusicStream, [Music.by_value, :float], :void],
      [:SetMusicVolume, :SetMusicVolume, [Music.by_value, :float], :void],
      [:SetMusicPitch, :SetMusicPitch, [Music.by_value, :float], :void],
      [:SetMusicPan, :SetMusicPan, [Music.by_value, :float], :void],
      [:GetMusicTimeLength, :GetMusicTimeLength, [Music.by_value], :float],
      [:GetMusicTimePlayed, :GetMusicTimePlayed, [Music.by_value], :float],
      [:LoadAudioStream, :LoadAudioStream, [:uint, :uint, :uint], AudioStream.by_value],
      [:UnloadAudioStream, :UnloadAudioStream, [AudioStream.by_value], :void],
      [:UpdateAudioStream, :UpdateAudioStream, [AudioStream.by_value, :pointer, :int], :void],
      [:IsAudioStreamProcessed, :IsAudioStreamProcessed, [AudioStream.by_value], :bool],
      [:PlayAudioStream, :PlayAudioStream, [AudioStream.by_value], :void],
      [:PauseAudioStream, :PauseAudioStream, [AudioStream.by_value], :void],
      [:ResumeAudioStream, :ResumeAudioStream, [AudioStream.by_value], :void],
      [:IsAudioStreamPlaying, :IsAudioStreamPlaying, [AudioStream.by_value], :bool],
      [:StopAudioStream, :StopAudioStream, [AudioStream.by_value], :void],
      [:SetAudioStreamVolume, :SetAudioStreamVolume, [AudioStream.by_value, :float], :void],
      [:SetAudioStreamPitch, :SetAudioStreamPitch, [AudioStream.by_value, :float], :void],
      [:SetAudioStreamPan, :SetAudioStreamPan, [AudioStream.by_value, :float], :void],
      [:SetAudioStreamBufferSizeDefault, :SetAudioStreamBufferSizeDefault, [:int], :void],
      [:SetAudioStreamCallback, :SetAudioStreamCallback, [AudioStream.by_value, :AudioCallback], :void],
      [:AttachAudioStreamProcessor, :AttachAudioStreamProcessor, [AudioStream.by_value, :AudioCallback], :void],
      [:DetachAudioStreamProcessor, :DetachAudioStreamProcessor, [AudioStream.by_value, :AudioCallback], :void],
    ]
    entries.each do |entry|
      begin
        attach_function entry[0], entry[1], entry[2], entry[3]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{entry[0]} (#{error}).") if output_error
      end
    end
  end

end

