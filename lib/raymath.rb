# Yet another raylib wrapper for Ruby
#
# * https://github.com/vaiorabbit/raylib-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module Raylib
  extend FFI::Library
  # Define/Macro

  EPSILON = 0.000001

  # Enum


  # Typedef


  # Struct

  # NOTE: Helper types to be used instead of array return types for *ToFloat functions
  class Float3 < FFI::Struct
    layout(
      :v, [:float, 3],
    )
  end

  class Float16 < FFI::Struct
    layout(
      :v, [:float, 16],
    )
  end


  # Function

  def self.setup_raymath_symbols(output_error = false)
    entries = [
      [:Clamp, :Clamp, [:float, :float, :float], :float],
      [:Lerp, :Lerp, [:float, :float, :float], :float],
      [:Normalize, :Normalize, [:float, :float, :float], :float],
      [:Remap, :Remap, [:float, :float, :float, :float, :float], :float],
      [:Wrap, :Wrap, [:float, :float, :float], :float],
      [:FloatEquals, :FloatEquals, [:float, :float], :int],
      [:Vector2Zero, :Vector2Zero, [], Vector2.by_value],
      [:Vector2One, :Vector2One, [], Vector2.by_value],
      [:Vector2Add, :Vector2Add, [Vector2.by_value, Vector2.by_value], Vector2.by_value],
      [:Vector2AddValue, :Vector2AddValue, [Vector2.by_value, :float], Vector2.by_value],
      [:Vector2Subtract, :Vector2Subtract, [Vector2.by_value, Vector2.by_value], Vector2.by_value],
      [:Vector2SubtractValue, :Vector2SubtractValue, [Vector2.by_value, :float], Vector2.by_value],
      [:Vector2Length, :Vector2Length, [Vector2.by_value], :float],
      [:Vector2LengthSqr, :Vector2LengthSqr, [Vector2.by_value], :float],
      [:Vector2DotProduct, :Vector2DotProduct, [Vector2.by_value, Vector2.by_value], :float],
      [:Vector2Distance, :Vector2Distance, [Vector2.by_value, Vector2.by_value], :float],
      [:Vector2DistanceSqr, :Vector2DistanceSqr, [Vector2.by_value, Vector2.by_value], :float],
      [:Vector2Angle, :Vector2Angle, [Vector2.by_value, Vector2.by_value], :float],
      [:Vector2Scale, :Vector2Scale, [Vector2.by_value, :float], Vector2.by_value],
      [:Vector2Multiply, :Vector2Multiply, [Vector2.by_value, Vector2.by_value], Vector2.by_value],
      [:Vector2Negate, :Vector2Negate, [Vector2.by_value], Vector2.by_value],
      [:Vector2Divide, :Vector2Divide, [Vector2.by_value, Vector2.by_value], Vector2.by_value],
      [:Vector2Normalize, :Vector2Normalize, [Vector2.by_value], Vector2.by_value],
      [:Vector2Transform, :Vector2Transform, [Vector2.by_value, Matrix.by_value], Vector2.by_value],
      [:Vector2Lerp, :Vector2Lerp, [Vector2.by_value, Vector2.by_value, :float], Vector2.by_value],
      [:Vector2Reflect, :Vector2Reflect, [Vector2.by_value, Vector2.by_value], Vector2.by_value],
      [:Vector2Rotate, :Vector2Rotate, [Vector2.by_value, :float], Vector2.by_value],
      [:Vector2MoveTowards, :Vector2MoveTowards, [Vector2.by_value, Vector2.by_value, :float], Vector2.by_value],
      [:Vector2Invert, :Vector2Invert, [Vector2.by_value], Vector2.by_value],
      [:Vector2Clamp, :Vector2Clamp, [Vector2.by_value, Vector2.by_value, Vector2.by_value], Vector2.by_value],
      [:Vector2ClampValue, :Vector2ClampValue, [Vector2.by_value, :float, :float], Vector2.by_value],
      [:Vector2Equals, :Vector2Equals, [Vector2.by_value, Vector2.by_value], :int],
      [:Vector3Zero, :Vector3Zero, [], Vector3.by_value],
      [:Vector3One, :Vector3One, [], Vector3.by_value],
      [:Vector3Add, :Vector3Add, [Vector3.by_value, Vector3.by_value], Vector3.by_value],
      [:Vector3AddValue, :Vector3AddValue, [Vector3.by_value, :float], Vector3.by_value],
      [:Vector3Subtract, :Vector3Subtract, [Vector3.by_value, Vector3.by_value], Vector3.by_value],
      [:Vector3SubtractValue, :Vector3SubtractValue, [Vector3.by_value, :float], Vector3.by_value],
      [:Vector3Scale, :Vector3Scale, [Vector3.by_value, :float], Vector3.by_value],
      [:Vector3Multiply, :Vector3Multiply, [Vector3.by_value, Vector3.by_value], Vector3.by_value],
      [:Vector3CrossProduct, :Vector3CrossProduct, [Vector3.by_value, Vector3.by_value], Vector3.by_value],
      [:Vector3Perpendicular, :Vector3Perpendicular, [Vector3.by_value], Vector3.by_value],
      [:Vector3Length, :Vector3Length, [Vector3.by_value], :float],
      [:Vector3LengthSqr, :Vector3LengthSqr, [Vector3.by_value], :float],
      [:Vector3DotProduct, :Vector3DotProduct, [Vector3.by_value, Vector3.by_value], :float],
      [:Vector3Distance, :Vector3Distance, [Vector3.by_value, Vector3.by_value], :float],
      [:Vector3DistanceSqr, :Vector3DistanceSqr, [Vector3.by_value, Vector3.by_value], :float],
      [:Vector3Angle, :Vector3Angle, [Vector3.by_value, Vector3.by_value], :float],
      [:Vector3Negate, :Vector3Negate, [Vector3.by_value], Vector3.by_value],
      [:Vector3Divide, :Vector3Divide, [Vector3.by_value, Vector3.by_value], Vector3.by_value],
      [:Vector3Normalize, :Vector3Normalize, [Vector3.by_value], Vector3.by_value],
      [:Vector3OrthoNormalize, :Vector3OrthoNormalize, [:pointer, :pointer], :void],
      [:Vector3Transform, :Vector3Transform, [Vector3.by_value, Matrix.by_value], Vector3.by_value],
      [:Vector3RotateByQuaternion, :Vector3RotateByQuaternion, [Vector3.by_value, Quaternion.by_value], Vector3.by_value],
      [:Vector3RotateByAxisAngle, :Vector3RotateByAxisAngle, [Vector3.by_value, Vector3.by_value, :float], Vector3.by_value],
      [:Vector3Lerp, :Vector3Lerp, [Vector3.by_value, Vector3.by_value, :float], Vector3.by_value],
      [:Vector3Reflect, :Vector3Reflect, [Vector3.by_value, Vector3.by_value], Vector3.by_value],
      [:Vector3Min, :Vector3Min, [Vector3.by_value, Vector3.by_value], Vector3.by_value],
      [:Vector3Max, :Vector3Max, [Vector3.by_value, Vector3.by_value], Vector3.by_value],
      [:Vector3Barycenter, :Vector3Barycenter, [Vector3.by_value, Vector3.by_value, Vector3.by_value, Vector3.by_value], Vector3.by_value],
      [:Vector3Unproject, :Vector3Unproject, [Vector3.by_value, Matrix.by_value, Matrix.by_value], Vector3.by_value],
      [:Vector3ToFloatV, :Vector3ToFloatV, [Vector3.by_value], Float3.by_value],
      [:Vector3Invert, :Vector3Invert, [Vector3.by_value], Vector3.by_value],
      [:Vector3Clamp, :Vector3Clamp, [Vector3.by_value, Vector3.by_value, Vector3.by_value], Vector3.by_value],
      [:Vector3ClampValue, :Vector3ClampValue, [Vector3.by_value, :float, :float], Vector3.by_value],
      [:Vector3Equals, :Vector3Equals, [Vector3.by_value, Vector3.by_value], :int],
      [:Vector3Refract, :Vector3Refract, [Vector3.by_value, Vector3.by_value, :float], Vector3.by_value],
      [:MatrixDeterminant, :MatrixDeterminant, [Matrix.by_value], :float],
      [:MatrixTrace, :MatrixTrace, [Matrix.by_value], :float],
      [:MatrixTranspose, :MatrixTranspose, [Matrix.by_value], Matrix.by_value],
      [:MatrixInvert, :MatrixInvert, [Matrix.by_value], Matrix.by_value],
      [:MatrixIdentity, :MatrixIdentity, [], Matrix.by_value],
      [:MatrixAdd, :MatrixAdd, [Matrix.by_value, Matrix.by_value], Matrix.by_value],
      [:MatrixSubtract, :MatrixSubtract, [Matrix.by_value, Matrix.by_value], Matrix.by_value],
      [:MatrixMultiply, :MatrixMultiply, [Matrix.by_value, Matrix.by_value], Matrix.by_value],
      [:MatrixTranslate, :MatrixTranslate, [:float, :float, :float], Matrix.by_value],
      [:MatrixRotate, :MatrixRotate, [Vector3.by_value, :float], Matrix.by_value],
      [:MatrixRotateX, :MatrixRotateX, [:float], Matrix.by_value],
      [:MatrixRotateY, :MatrixRotateY, [:float], Matrix.by_value],
      [:MatrixRotateZ, :MatrixRotateZ, [:float], Matrix.by_value],
      [:MatrixRotateXYZ, :MatrixRotateXYZ, [Vector3.by_value], Matrix.by_value],
      [:MatrixRotateZYX, :MatrixRotateZYX, [Vector3.by_value], Matrix.by_value],
      [:MatrixScale, :MatrixScale, [:float, :float, :float], Matrix.by_value],
      [:MatrixFrustum, :MatrixFrustum, [:double, :double, :double, :double, :double, :double], Matrix.by_value],
      [:MatrixPerspective, :MatrixPerspective, [:double, :double, :double, :double], Matrix.by_value],
      [:MatrixOrtho, :MatrixOrtho, [:double, :double, :double, :double, :double, :double], Matrix.by_value],
      [:MatrixLookAt, :MatrixLookAt, [Vector3.by_value, Vector3.by_value, Vector3.by_value], Matrix.by_value],
      [:MatrixToFloatV, :MatrixToFloatV, [Matrix.by_value], Float16.by_value],
      [:QuaternionAdd, :QuaternionAdd, [Quaternion.by_value, Quaternion.by_value], Quaternion.by_value],
      [:QuaternionAddValue, :QuaternionAddValue, [Quaternion.by_value, :float], Quaternion.by_value],
      [:QuaternionSubtract, :QuaternionSubtract, [Quaternion.by_value, Quaternion.by_value], Quaternion.by_value],
      [:QuaternionSubtractValue, :QuaternionSubtractValue, [Quaternion.by_value, :float], Quaternion.by_value],
      [:QuaternionIdentity, :QuaternionIdentity, [], Quaternion.by_value],
      [:QuaternionLength, :QuaternionLength, [Quaternion.by_value], :float],
      [:QuaternionNormalize, :QuaternionNormalize, [Quaternion.by_value], Quaternion.by_value],
      [:QuaternionInvert, :QuaternionInvert, [Quaternion.by_value], Quaternion.by_value],
      [:QuaternionMultiply, :QuaternionMultiply, [Quaternion.by_value, Quaternion.by_value], Quaternion.by_value],
      [:QuaternionScale, :QuaternionScale, [Quaternion.by_value, :float], Quaternion.by_value],
      [:QuaternionDivide, :QuaternionDivide, [Quaternion.by_value, Quaternion.by_value], Quaternion.by_value],
      [:QuaternionLerp, :QuaternionLerp, [Quaternion.by_value, Quaternion.by_value, :float], Quaternion.by_value],
      [:QuaternionNlerp, :QuaternionNlerp, [Quaternion.by_value, Quaternion.by_value, :float], Quaternion.by_value],
      [:QuaternionSlerp, :QuaternionSlerp, [Quaternion.by_value, Quaternion.by_value, :float], Quaternion.by_value],
      [:QuaternionFromVector3ToVector3, :QuaternionFromVector3ToVector3, [Vector3.by_value, Vector3.by_value], Quaternion.by_value],
      [:QuaternionFromMatrix, :QuaternionFromMatrix, [Matrix.by_value], Quaternion.by_value],
      [:QuaternionToMatrix, :QuaternionToMatrix, [Quaternion.by_value], Matrix.by_value],
      [:QuaternionFromAxisAngle, :QuaternionFromAxisAngle, [Vector3.by_value, :float], Quaternion.by_value],
      [:QuaternionToAxisAngle, :QuaternionToAxisAngle, [Quaternion.by_value, :pointer, :pointer], :void],
      [:QuaternionFromEuler, :QuaternionFromEuler, [:float, :float, :float], Quaternion.by_value],
      [:QuaternionToEuler, :QuaternionToEuler, [Quaternion.by_value], Vector3.by_value],
      [:QuaternionTransform, :QuaternionTransform, [Quaternion.by_value, Matrix.by_value], Quaternion.by_value],
      [:QuaternionEquals, :QuaternionEquals, [Quaternion.by_value, Quaternion.by_value], :int],
    ]
    entries.each do |entry|
      begin
        attach_function entry[0], entry[1], entry[2], entry[3]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{entry[0]} (#{error}).") if output_error
      end
    end
  end

end

