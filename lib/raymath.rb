# Yet another raylib wrapper for Ruby
#
# * https://github.com/vaiorabbit/raylib-bindings
#
# [NOTICE] This is an automatically generated file.

require 'ffi'

module Raylib
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class Float3 < FFI::Struct
    layout(
      :v, [:float, 3],
    )
  end

  class Float16 < FFI::Struct
    layout(
      :v, [:float, 16],
    )
  end


  # Function

  def self.setup_raymath_symbols()
    symbols = [
      :Clamp,
      :Lerp,
      :Normalize,
      :Remap,
      :FloatEquals,
      :Vector2Zero,
      :Vector2One,
      :Vector2Add,
      :Vector2AddValue,
      :Vector2Subtract,
      :Vector2SubtractValue,
      :Vector2Length,
      :Vector2LengthSqr,
      :Vector2DotProduct,
      :Vector2Distance,
      :Vector2DistanceSqr,
      :Vector2Angle,
      :Vector2Scale,
      :Vector2Multiply,
      :Vector2Negate,
      :Vector2Divide,
      :Vector2Normalize,
      :Vector2Transform,
      :Vector2Lerp,
      :Vector2Reflect,
      :Vector2Rotate,
      :Vector2MoveTowards,
      :Vector2Invert,
      :Vector2Clamp,
      :Vector2ClampValue,
      :Vector2Equals,
      :Vector3Zero,
      :Vector3One,
      :Vector3Add,
      :Vector3AddValue,
      :Vector3Subtract,
      :Vector3SubtractValue,
      :Vector3Scale,
      :Vector3Multiply,
      :Vector3CrossProduct,
      :Vector3Perpendicular,
      :Vector3Length,
      :Vector3LengthSqr,
      :Vector3DotProduct,
      :Vector3Distance,
      :Vector3DistanceSqr,
      :Vector3Angle,
      :Vector3Negate,
      :Vector3Divide,
      :Vector3Normalize,
      :Vector3OrthoNormalize,
      :Vector3Transform,
      :Vector3RotateByQuaternion,
      :Vector3Lerp,
      :Vector3Reflect,
      :Vector3Min,
      :Vector3Max,
      :Vector3Barycenter,
      :Vector3Unproject,
      :Vector3ToFloatV,
      :Vector3Invert,
      :Vector3Clamp,
      :Vector3ClampValue,
      :Vector3Equals,
      :Vector3Refract,
      :MatrixDeterminant,
      :MatrixTrace,
      :MatrixTranspose,
      :MatrixInvert,
      :MatrixIdentity,
      :MatrixAdd,
      :MatrixSubtract,
      :MatrixMultiply,
      :MatrixTranslate,
      :MatrixRotate,
      :MatrixRotateX,
      :MatrixRotateY,
      :MatrixRotateZ,
      :MatrixRotateXYZ,
      :MatrixRotateZYX,
      :MatrixScale,
      :MatrixFrustum,
      :MatrixPerspective,
      :MatrixOrtho,
      :MatrixLookAt,
      :MatrixToFloatV,
      :QuaternionAdd,
      :QuaternionAddValue,
      :QuaternionSubtract,
      :QuaternionSubtractValue,
      :QuaternionIdentity,
      :QuaternionLength,
      :QuaternionNormalize,
      :QuaternionInvert,
      :QuaternionMultiply,
      :QuaternionScale,
      :QuaternionDivide,
      :QuaternionLerp,
      :QuaternionNlerp,
      :QuaternionSlerp,
      :QuaternionFromVector3ToVector3,
      :QuaternionFromMatrix,
      :QuaternionToMatrix,
      :QuaternionFromAxisAngle,
      :QuaternionToAxisAngle,
      :QuaternionFromEuler,
      :QuaternionToEuler,
      :QuaternionTransform,
      :QuaternionEquals,
    ]
    args = {
      :Clamp => [:float, :float, :float],
      :Lerp => [:float, :float, :float],
      :Normalize => [:float, :float, :float],
      :Remap => [:float, :float, :float, :float, :float],
      :FloatEquals => [:float, :float],
      :Vector2Zero => [],
      :Vector2One => [],
      :Vector2Add => [Vector2.by_value, Vector2.by_value],
      :Vector2AddValue => [Vector2.by_value, :float],
      :Vector2Subtract => [Vector2.by_value, Vector2.by_value],
      :Vector2SubtractValue => [Vector2.by_value, :float],
      :Vector2Length => [Vector2.by_value],
      :Vector2LengthSqr => [Vector2.by_value],
      :Vector2DotProduct => [Vector2.by_value, Vector2.by_value],
      :Vector2Distance => [Vector2.by_value, Vector2.by_value],
      :Vector2DistanceSqr => [Vector2.by_value, Vector2.by_value],
      :Vector2Angle => [Vector2.by_value, Vector2.by_value],
      :Vector2Scale => [Vector2.by_value, :float],
      :Vector2Multiply => [Vector2.by_value, Vector2.by_value],
      :Vector2Negate => [Vector2.by_value],
      :Vector2Divide => [Vector2.by_value, Vector2.by_value],
      :Vector2Normalize => [Vector2.by_value],
      :Vector2Transform => [Vector2.by_value, Matrix.by_value],
      :Vector2Lerp => [Vector2.by_value, Vector2.by_value, :float],
      :Vector2Reflect => [Vector2.by_value, Vector2.by_value],
      :Vector2Rotate => [Vector2.by_value, :float],
      :Vector2MoveTowards => [Vector2.by_value, Vector2.by_value, :float],
      :Vector2Invert => [Vector2.by_value],
      :Vector2Clamp => [Vector2.by_value, Vector2.by_value, Vector2.by_value],
      :Vector2ClampValue => [Vector2.by_value, :float, :float],
      :Vector2Equals => [Vector2.by_value, Vector2.by_value],
      :Vector3Zero => [],
      :Vector3One => [],
      :Vector3Add => [Vector3.by_value, Vector3.by_value],
      :Vector3AddValue => [Vector3.by_value, :float],
      :Vector3Subtract => [Vector3.by_value, Vector3.by_value],
      :Vector3SubtractValue => [Vector3.by_value, :float],
      :Vector3Scale => [Vector3.by_value, :float],
      :Vector3Multiply => [Vector3.by_value, Vector3.by_value],
      :Vector3CrossProduct => [Vector3.by_value, Vector3.by_value],
      :Vector3Perpendicular => [Vector3.by_value],
      :Vector3Length => [Vector3.by_value],
      :Vector3LengthSqr => [Vector3.by_value],
      :Vector3DotProduct => [Vector3.by_value, Vector3.by_value],
      :Vector3Distance => [Vector3.by_value, Vector3.by_value],
      :Vector3DistanceSqr => [Vector3.by_value, Vector3.by_value],
      :Vector3Angle => [Vector3.by_value, Vector3.by_value],
      :Vector3Negate => [Vector3.by_value],
      :Vector3Divide => [Vector3.by_value, Vector3.by_value],
      :Vector3Normalize => [Vector3.by_value],
      :Vector3OrthoNormalize => [:pointer, :pointer],
      :Vector3Transform => [Vector3.by_value, Matrix.by_value],
      :Vector3RotateByQuaternion => [Vector3.by_value, Quaternion.by_value],
      :Vector3Lerp => [Vector3.by_value, Vector3.by_value, :float],
      :Vector3Reflect => [Vector3.by_value, Vector3.by_value],
      :Vector3Min => [Vector3.by_value, Vector3.by_value],
      :Vector3Max => [Vector3.by_value, Vector3.by_value],
      :Vector3Barycenter => [Vector3.by_value, Vector3.by_value, Vector3.by_value, Vector3.by_value],
      :Vector3Unproject => [Vector3.by_value, Matrix.by_value, Matrix.by_value],
      :Vector3ToFloatV => [Vector3.by_value],
      :Vector3Invert => [Vector3.by_value],
      :Vector3Clamp => [Vector3.by_value, Vector3.by_value, Vector3.by_value],
      :Vector3ClampValue => [Vector3.by_value, :float, :float],
      :Vector3Equals => [Vector3.by_value, Vector3.by_value],
      :Vector3Refract => [Vector3.by_value, Vector3.by_value, :float],
      :MatrixDeterminant => [Matrix.by_value],
      :MatrixTrace => [Matrix.by_value],
      :MatrixTranspose => [Matrix.by_value],
      :MatrixInvert => [Matrix.by_value],
      :MatrixIdentity => [],
      :MatrixAdd => [Matrix.by_value, Matrix.by_value],
      :MatrixSubtract => [Matrix.by_value, Matrix.by_value],
      :MatrixMultiply => [Matrix.by_value, Matrix.by_value],
      :MatrixTranslate => [:float, :float, :float],
      :MatrixRotate => [Vector3.by_value, :float],
      :MatrixRotateX => [:float],
      :MatrixRotateY => [:float],
      :MatrixRotateZ => [:float],
      :MatrixRotateXYZ => [Vector3.by_value],
      :MatrixRotateZYX => [Vector3.by_value],
      :MatrixScale => [:float, :float, :float],
      :MatrixFrustum => [:double, :double, :double, :double, :double, :double],
      :MatrixPerspective => [:double, :double, :double, :double],
      :MatrixOrtho => [:double, :double, :double, :double, :double, :double],
      :MatrixLookAt => [Vector3.by_value, Vector3.by_value, Vector3.by_value],
      :MatrixToFloatV => [Matrix.by_value],
      :QuaternionAdd => [Quaternion.by_value, Quaternion.by_value],
      :QuaternionAddValue => [Quaternion.by_value, :float],
      :QuaternionSubtract => [Quaternion.by_value, Quaternion.by_value],
      :QuaternionSubtractValue => [Quaternion.by_value, :float],
      :QuaternionIdentity => [],
      :QuaternionLength => [Quaternion.by_value],
      :QuaternionNormalize => [Quaternion.by_value],
      :QuaternionInvert => [Quaternion.by_value],
      :QuaternionMultiply => [Quaternion.by_value, Quaternion.by_value],
      :QuaternionScale => [Quaternion.by_value, :float],
      :QuaternionDivide => [Quaternion.by_value, Quaternion.by_value],
      :QuaternionLerp => [Quaternion.by_value, Quaternion.by_value, :float],
      :QuaternionNlerp => [Quaternion.by_value, Quaternion.by_value, :float],
      :QuaternionSlerp => [Quaternion.by_value, Quaternion.by_value, :float],
      :QuaternionFromVector3ToVector3 => [Vector3.by_value, Vector3.by_value],
      :QuaternionFromMatrix => [Matrix.by_value],
      :QuaternionToMatrix => [Quaternion.by_value],
      :QuaternionFromAxisAngle => [Vector3.by_value, :float],
      :QuaternionToAxisAngle => [Quaternion.by_value, :pointer, :pointer],
      :QuaternionFromEuler => [:float, :float, :float],
      :QuaternionToEuler => [Quaternion.by_value],
      :QuaternionTransform => [Quaternion.by_value, Matrix.by_value],
      :QuaternionEquals => [Quaternion.by_value, Quaternion.by_value],
    }
    retvals = {
      :Clamp => :float,
      :Lerp => :float,
      :Normalize => :float,
      :Remap => :float,
      :FloatEquals => :int,
      :Vector2Zero => Vector2.by_value,
      :Vector2One => Vector2.by_value,
      :Vector2Add => Vector2.by_value,
      :Vector2AddValue => Vector2.by_value,
      :Vector2Subtract => Vector2.by_value,
      :Vector2SubtractValue => Vector2.by_value,
      :Vector2Length => :float,
      :Vector2LengthSqr => :float,
      :Vector2DotProduct => :float,
      :Vector2Distance => :float,
      :Vector2DistanceSqr => :float,
      :Vector2Angle => :float,
      :Vector2Scale => Vector2.by_value,
      :Vector2Multiply => Vector2.by_value,
      :Vector2Negate => Vector2.by_value,
      :Vector2Divide => Vector2.by_value,
      :Vector2Normalize => Vector2.by_value,
      :Vector2Transform => Vector2.by_value,
      :Vector2Lerp => Vector2.by_value,
      :Vector2Reflect => Vector2.by_value,
      :Vector2Rotate => Vector2.by_value,
      :Vector2MoveTowards => Vector2.by_value,
      :Vector2Invert => Vector2.by_value,
      :Vector2Clamp => Vector2.by_value,
      :Vector2ClampValue => Vector2.by_value,
      :Vector2Equals => :int,
      :Vector3Zero => Vector3.by_value,
      :Vector3One => Vector3.by_value,
      :Vector3Add => Vector3.by_value,
      :Vector3AddValue => Vector3.by_value,
      :Vector3Subtract => Vector3.by_value,
      :Vector3SubtractValue => Vector3.by_value,
      :Vector3Scale => Vector3.by_value,
      :Vector3Multiply => Vector3.by_value,
      :Vector3CrossProduct => Vector3.by_value,
      :Vector3Perpendicular => Vector3.by_value,
      :Vector3Length => :float,
      :Vector3LengthSqr => :float,
      :Vector3DotProduct => :float,
      :Vector3Distance => :float,
      :Vector3DistanceSqr => :float,
      :Vector3Angle => :float,
      :Vector3Negate => Vector3.by_value,
      :Vector3Divide => Vector3.by_value,
      :Vector3Normalize => Vector3.by_value,
      :Vector3OrthoNormalize => :void,
      :Vector3Transform => Vector3.by_value,
      :Vector3RotateByQuaternion => Vector3.by_value,
      :Vector3Lerp => Vector3.by_value,
      :Vector3Reflect => Vector3.by_value,
      :Vector3Min => Vector3.by_value,
      :Vector3Max => Vector3.by_value,
      :Vector3Barycenter => Vector3.by_value,
      :Vector3Unproject => Vector3.by_value,
      :Vector3ToFloatV => Float3.by_value,
      :Vector3Invert => Vector3.by_value,
      :Vector3Clamp => Vector3.by_value,
      :Vector3ClampValue => Vector3.by_value,
      :Vector3Equals => :int,
      :Vector3Refract => Vector3.by_value,
      :MatrixDeterminant => :float,
      :MatrixTrace => :float,
      :MatrixTranspose => Matrix.by_value,
      :MatrixInvert => Matrix.by_value,
      :MatrixIdentity => Matrix.by_value,
      :MatrixAdd => Matrix.by_value,
      :MatrixSubtract => Matrix.by_value,
      :MatrixMultiply => Matrix.by_value,
      :MatrixTranslate => Matrix.by_value,
      :MatrixRotate => Matrix.by_value,
      :MatrixRotateX => Matrix.by_value,
      :MatrixRotateY => Matrix.by_value,
      :MatrixRotateZ => Matrix.by_value,
      :MatrixRotateXYZ => Matrix.by_value,
      :MatrixRotateZYX => Matrix.by_value,
      :MatrixScale => Matrix.by_value,
      :MatrixFrustum => Matrix.by_value,
      :MatrixPerspective => Matrix.by_value,
      :MatrixOrtho => Matrix.by_value,
      :MatrixLookAt => Matrix.by_value,
      :MatrixToFloatV => Float16.by_value,
      :QuaternionAdd => Quaternion.by_value,
      :QuaternionAddValue => Quaternion.by_value,
      :QuaternionSubtract => Quaternion.by_value,
      :QuaternionSubtractValue => Quaternion.by_value,
      :QuaternionIdentity => Quaternion.by_value,
      :QuaternionLength => :float,
      :QuaternionNormalize => Quaternion.by_value,
      :QuaternionInvert => Quaternion.by_value,
      :QuaternionMultiply => Quaternion.by_value,
      :QuaternionScale => Quaternion.by_value,
      :QuaternionDivide => Quaternion.by_value,
      :QuaternionLerp => Quaternion.by_value,
      :QuaternionNlerp => Quaternion.by_value,
      :QuaternionSlerp => Quaternion.by_value,
      :QuaternionFromVector3ToVector3 => Quaternion.by_value,
      :QuaternionFromMatrix => Quaternion.by_value,
      :QuaternionToMatrix => Matrix.by_value,
      :QuaternionFromAxisAngle => Quaternion.by_value,
      :QuaternionToAxisAngle => :void,
      :QuaternionFromEuler => Quaternion.by_value,
      :QuaternionToEuler => Vector3.by_value,
      :QuaternionTransform => Quaternion.by_value,
      :QuaternionEquals => :int,
    }
    symbols.each do |sym|
      begin
        attach_function sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).")
      end
    end
  end

end

