# Yet another raylib wrapper for Ruby
#
# * https://github.com/vaiorabbit/raylib-bindings
#
# [NOTICE] This is an automatically generated file.

require 'ffi'

module Raylib
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class Float3 < FFI::Struct
    layout(
      :v, [:float, 3],
    )
  end

  class Float16 < FFI::Struct
    layout(
      :v, [:float, 16],
    )
  end


  # Function

  def self.setup_raymath_symbols()
    symbols = [
      :Clamp,
      :Lerp,
      :Normalize,
      :Remap,
      :Vector2Zero,
      :Vector2One,
      :Vector2Add,
      :Vector2AddValue,
      :Vector2Subtract,
      :Vector2SubtractValue,
      :Vector2Length,
      :Vector2LengthSqr,
      :Vector2DotProduct,
      :Vector2Distance,
      :Vector2Angle,
      :Vector2Scale,
      :Vector2Multiply,
      :Vector2Negate,
      :Vector2Divide,
      :Vector2Normalize,
      :Vector2Lerp,
      :Vector2Reflect,
      :Vector2Rotate,
      :Vector2MoveTowards,
      :Vector3Zero,
      :Vector3One,
      :Vector3Add,
      :Vector3AddValue,
      :Vector3Subtract,
      :Vector3SubtractValue,
      :Vector3Scale,
      :Vector3Multiply,
      :Vector3CrossProduct,
      :Vector3Perpendicular,
      :Vector3Length,
      :Vector3LengthSqr,
      :Vector3DotProduct,
      :Vector3Distance,
      :Vector3Angle,
      :Vector3Negate,
      :Vector3Divide,
      :Vector3Normalize,
      :Vector3OrthoNormalize,
      :Vector3Transform,
      :Vector3RotateByQuaternion,
      :Vector3Lerp,
      :Vector3Reflect,
      :Vector3Min,
      :Vector3Max,
      :Vector3Barycenter,
      :Vector3Unproject,
      :Vector3ToFloatV,
      :MatrixDeterminant,
      :MatrixTrace,
      :MatrixTranspose,
      :MatrixInvert,
      :MatrixNormalize,
      :MatrixIdentity,
      :MatrixAdd,
      :MatrixSubtract,
      :MatrixMultiply,
      :MatrixTranslate,
      :MatrixRotate,
      :MatrixRotateX,
      :MatrixRotateY,
      :MatrixRotateZ,
      :MatrixRotateXYZ,
      :MatrixRotateZYX,
      :MatrixScale,
      :MatrixFrustum,
      :MatrixPerspective,
      :MatrixOrtho,
      :MatrixLookAt,
      :MatrixToFloatV,
      :QuaternionAdd,
      :QuaternionAddValue,
      :QuaternionSubtract,
      :QuaternionSubtractValue,
      :QuaternionIdentity,
      :QuaternionLength,
      :QuaternionNormalize,
      :QuaternionInvert,
      :QuaternionMultiply,
      :QuaternionScale,
      :QuaternionDivide,
      :QuaternionLerp,
      :QuaternionNlerp,
      :QuaternionSlerp,
      :QuaternionFromVector3ToVector3,
      :QuaternionFromMatrix,
      :QuaternionToMatrix,
      :QuaternionFromAxisAngle,
      :QuaternionToAxisAngle,
      :QuaternionFromEuler,
      :QuaternionToEuler,
      :QuaternionTransform,
    ]
    args = {
      :Clamp => [:float, :float, :float],
      :Lerp => [:float, :float, :float],
      :Normalize => [:float, :float, :float],
      :Remap => [:float, :float, :float, :float, :float],
      :Vector2Zero => [],
      :Vector2One => [],
      :Vector2Add => [:int, :int],
      :Vector2AddValue => [:int, :float],
      :Vector2Subtract => [:int, :int],
      :Vector2SubtractValue => [:int, :float],
      :Vector2Length => [:int],
      :Vector2LengthSqr => [:int],
      :Vector2DotProduct => [:int, :int],
      :Vector2Distance => [:int, :int],
      :Vector2Angle => [:int, :int],
      :Vector2Scale => [:int, :float],
      :Vector2Multiply => [:int, :int],
      :Vector2Negate => [:int],
      :Vector2Divide => [:int, :int],
      :Vector2Normalize => [:int],
      :Vector2Lerp => [:int, :int, :float],
      :Vector2Reflect => [:int, :int],
      :Vector2Rotate => [:int, :float],
      :Vector2MoveTowards => [:int, :int, :float],
      :Vector3Zero => [],
      :Vector3One => [],
      :Vector3Add => [:int, :int],
      :Vector3AddValue => [:int, :float],
      :Vector3Subtract => [:int, :int],
      :Vector3SubtractValue => [:int, :float],
      :Vector3Scale => [:int, :float],
      :Vector3Multiply => [:int, :int],
      :Vector3CrossProduct => [:int, :int],
      :Vector3Perpendicular => [:int],
      :Vector3Length => [:int],
      :Vector3LengthSqr => [:int],
      :Vector3DotProduct => [:int, :int],
      :Vector3Distance => [:int, :int],
      :Vector3Angle => [:int, :int],
      :Vector3Negate => [:int],
      :Vector3Divide => [:int, :int],
      :Vector3Normalize => [:int],
      :Vector3OrthoNormalize => [:pointer, :pointer],
      :Vector3Transform => [:int, :int],
      :Vector3RotateByQuaternion => [:int, :int],
      :Vector3Lerp => [:int, :int, :float],
      :Vector3Reflect => [:int, :int],
      :Vector3Min => [:int, :int],
      :Vector3Max => [:int, :int],
      :Vector3Barycenter => [:int, :int, :int, :int],
      :Vector3Unproject => [:int, :int, :int],
      :Vector3ToFloatV => [:int],
      :MatrixDeterminant => [:int],
      :MatrixTrace => [:int],
      :MatrixTranspose => [:int],
      :MatrixInvert => [:int],
      :MatrixNormalize => [:int],
      :MatrixIdentity => [],
      :MatrixAdd => [:int, :int],
      :MatrixSubtract => [:int, :int],
      :MatrixMultiply => [:int, :int],
      :MatrixTranslate => [:float, :float, :float],
      :MatrixRotate => [:int, :float],
      :MatrixRotateX => [:float],
      :MatrixRotateY => [:float],
      :MatrixRotateZ => [:float],
      :MatrixRotateXYZ => [:int],
      :MatrixRotateZYX => [:int],
      :MatrixScale => [:float, :float, :float],
      :MatrixFrustum => [:double, :double, :double, :double, :double, :double],
      :MatrixPerspective => [:double, :double, :double, :double],
      :MatrixOrtho => [:double, :double, :double, :double, :double, :double],
      :MatrixLookAt => [:int, :int, :int],
      :MatrixToFloatV => [:int],
      :QuaternionAdd => [:int, :int],
      :QuaternionAddValue => [:int, :float],
      :QuaternionSubtract => [:int, :int],
      :QuaternionSubtractValue => [:int, :float],
      :QuaternionIdentity => [],
      :QuaternionLength => [:int],
      :QuaternionNormalize => [:int],
      :QuaternionInvert => [:int],
      :QuaternionMultiply => [:int, :int],
      :QuaternionScale => [:int, :float],
      :QuaternionDivide => [:int, :int],
      :QuaternionLerp => [:int, :int, :float],
      :QuaternionNlerp => [:int, :int, :float],
      :QuaternionSlerp => [:int, :int, :float],
      :QuaternionFromVector3ToVector3 => [:int, :int],
      :QuaternionFromMatrix => [:int],
      :QuaternionToMatrix => [:int],
      :QuaternionFromAxisAngle => [:int, :float],
      :QuaternionToAxisAngle => [:int, :pointer, :pointer],
      :QuaternionFromEuler => [:float, :float, :float],
      :QuaternionToEuler => [:int],
      :QuaternionTransform => [:int, :int],
    }
    retvals = {
      :Clamp => :float,
      :Lerp => :float,
      :Normalize => :float,
      :Remap => :float,
      :Vector2Zero => :int,
      :Vector2One => :int,
      :Vector2Add => :int,
      :Vector2AddValue => :int,
      :Vector2Subtract => :int,
      :Vector2SubtractValue => :int,
      :Vector2Length => :float,
      :Vector2LengthSqr => :float,
      :Vector2DotProduct => :float,
      :Vector2Distance => :float,
      :Vector2Angle => :float,
      :Vector2Scale => :int,
      :Vector2Multiply => :int,
      :Vector2Negate => :int,
      :Vector2Divide => :int,
      :Vector2Normalize => :int,
      :Vector2Lerp => :int,
      :Vector2Reflect => :int,
      :Vector2Rotate => :int,
      :Vector2MoveTowards => :int,
      :Vector3Zero => :int,
      :Vector3One => :int,
      :Vector3Add => :int,
      :Vector3AddValue => :int,
      :Vector3Subtract => :int,
      :Vector3SubtractValue => :int,
      :Vector3Scale => :int,
      :Vector3Multiply => :int,
      :Vector3CrossProduct => :int,
      :Vector3Perpendicular => :int,
      :Vector3Length => :float,
      :Vector3LengthSqr => :float,
      :Vector3DotProduct => :float,
      :Vector3Distance => :float,
      :Vector3Angle => :int,
      :Vector3Negate => :int,
      :Vector3Divide => :int,
      :Vector3Normalize => :int,
      :Vector3OrthoNormalize => :void,
      :Vector3Transform => :int,
      :Vector3RotateByQuaternion => :int,
      :Vector3Lerp => :int,
      :Vector3Reflect => :int,
      :Vector3Min => :int,
      :Vector3Max => :int,
      :Vector3Barycenter => :int,
      :Vector3Unproject => :int,
      :Vector3ToFloatV => Float3.by_value,
      :MatrixDeterminant => :float,
      :MatrixTrace => :float,
      :MatrixTranspose => :int,
      :MatrixInvert => :int,
      :MatrixNormalize => :int,
      :MatrixIdentity => :int,
      :MatrixAdd => :int,
      :MatrixSubtract => :int,
      :MatrixMultiply => :int,
      :MatrixTranslate => :int,
      :MatrixRotate => :int,
      :MatrixRotateX => :int,
      :MatrixRotateY => :int,
      :MatrixRotateZ => :int,
      :MatrixRotateXYZ => :int,
      :MatrixRotateZYX => :int,
      :MatrixScale => :int,
      :MatrixFrustum => :int,
      :MatrixPerspective => :int,
      :MatrixOrtho => :int,
      :MatrixLookAt => :int,
      :MatrixToFloatV => Float16.by_value,
      :QuaternionAdd => :int,
      :QuaternionAddValue => :int,
      :QuaternionSubtract => :int,
      :QuaternionSubtractValue => :int,
      :QuaternionIdentity => :int,
      :QuaternionLength => :float,
      :QuaternionNormalize => :int,
      :QuaternionInvert => :int,
      :QuaternionMultiply => :int,
      :QuaternionScale => :int,
      :QuaternionDivide => :int,
      :QuaternionLerp => :int,
      :QuaternionNlerp => :int,
      :QuaternionSlerp => :int,
      :QuaternionFromVector3ToVector3 => :int,
      :QuaternionFromMatrix => :int,
      :QuaternionToMatrix => :int,
      :QuaternionFromAxisAngle => :int,
      :QuaternionToAxisAngle => :void,
      :QuaternionFromEuler => :int,
      :QuaternionToEuler => :int,
      :QuaternionTransform => :int,
    }
    symbols.each do |sym|
      begin
        attach_function sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).")
      end
    end
  end

end

