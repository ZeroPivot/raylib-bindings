# Yet another raylib wrapper for Ruby
#
# * https://github.com/vaiorabbit/raylib-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module Raylib
  extend FFI::Library

  # Define/Macro


  # Enum

  # enum CameraMode
  # Camera system modes
  CAMERA_CUSTOM = 0
  CAMERA_FREE = 1
  CAMERA_ORBITAL = 2
  CAMERA_FIRST_PERSON = 3
  CAMERA_THIRD_PERSON = 4

  # enum CameraProjection
  # Camera projection modes
  CAMERA_PERSPECTIVE = 0
  CAMERA_ORTHOGRAPHIC = 1


  # Typedef

  typedef :int, :CameraMode
  typedef :int, :CameraProjection

  # Function

  def self.setup_rcamera_symbols
    entries = [

      # GetCameraForward
      # @return []
      [:GetCameraForward, :GetCameraForward, [:pointer], Vector3.by_value],

      # GetCameraUp
      # @return []
      [:GetCameraUp, :GetCameraUp, [:pointer], Vector3.by_value],

      # GetCameraRight
      # @return []
      [:GetCameraRight, :GetCameraRight, [:pointer], Vector3.by_value],

      # CameraMoveForward
      # @return []
      [:CameraMoveForward, :CameraMoveForward, [:pointer, :float, :bool], :void],

      # CameraMoveUp
      # @return []
      [:CameraMoveUp, :CameraMoveUp, [:pointer, :float], :void],

      # CameraMoveRight
      # @return []
      [:CameraMoveRight, :CameraMoveRight, [:pointer, :float, :bool], :void],

      # CameraMoveToTarget
      # @return []
      [:CameraMoveToTarget, :CameraMoveToTarget, [:pointer, :float], :void],

      # CameraYaw
      # @return []
      [:CameraYaw, :CameraYaw, [:pointer, :float, :bool], :void],

      # CameraPitch
      # @return []
      [:CameraPitch, :CameraPitch, [:pointer, :float, :bool, :bool, :bool], :void],

      # CameraRoll
      # @return []
      [:CameraRoll, :CameraRoll, [:pointer, :float], :void],

      # GetCameraViewMatrix
      # @return []
      [:GetCameraViewMatrix, :GetCameraViewMatrix, [:pointer], :int],

      # GetCameraProjectionMatrix
      # @return []
      [:GetCameraProjectionMatrix, :GetCameraProjectionMatrix, [:pointer, :float], :int],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})."
    end
  end
end
